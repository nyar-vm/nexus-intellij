// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: dejavu.flex

package dejavu.psi;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static dejavu.psi.DejavuTypes.*;


public class _DejavuLexer implements com.intellij.lexer.FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ProgramContext = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\2\u1f00\1\u2200\1\u2300"+
    "\2\u1f00\31\u0100\1\u2400\121\u0100\1\u2500\4\u0100\1\u2600\1\u0100"+
    "\1\u2700\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00"+
    "\10\u2e00\31\u1f00\1\u0100\1\u2f00\1\u3000\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00\1\u0100"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u1f00"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000"+
    "\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00\4\u0100\1\u5400"+
    "\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600\1\u5700\2\u1f00"+
    "\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00\45\u1f00\1\u0100"+
    "\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00\1\u6000\1\u1f00"+
    "\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500\5\u1f00\1\u6600"+
    "\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00\1\u6b00\21\u1f00"+
    "\246\u0100\1\u6c00\20\u0100\1\u6d00\1\u6e00\25\u0100\1\u6f00\34\u0100"+
    "\1\u7000\14\u1f00\2\u0100\1\u7100\u0b06\u1f00\1\u7200\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\6\1\7\1\10\1\0\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\12\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\32\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\32\1\42"+
    "\1\43\1\44\1\45\1\32\1\46\1\47\2\32\1\50"+
    "\1\51\1\52\1\53\1\54\1\32\1\55\1\56\1\57"+
    "\1\60\1\32\1\61\3\32\1\62\1\63\1\64\1\65"+
    "\6\0\1\3\32\0\1\1\11\0\1\32\12\0\1\32"+
    "\1\0\1\66\2\0\1\32\5\0\27\32\1\0\37\32"+
    "\1\0\u01ca\32\4\0\14\32\16\0\5\32\7\0\1\32"+
    "\1\0\1\32\21\0\160\66\5\32\1\0\2\32\3\0"+
    "\3\32\1\0\1\32\6\0\1\32\1\66\3\32\1\0"+
    "\1\32\1\0\24\32\1\0\123\32\1\0\213\32\1\0"+
    "\5\66\2\0\246\32\1\0\46\32\2\0\1\32\6\0"+
    "\51\32\10\0\55\66\1\0\1\66\1\0\2\66\1\0"+
    "\2\66\1\0\1\66\10\0\33\32\4\0\4\32\35\0"+
    "\13\66\5\0\53\32\37\66\4\0\2\32\1\66\143\32"+
    "\1\0\1\32\7\66\2\0\6\66\2\32\2\66\1\0"+
    "\4\66\2\32\12\66\3\32\2\0\1\32\20\0\1\32"+
    "\1\66\36\32\33\66\2\0\131\32\13\66\1\32\16\0"+
    "\12\66\41\32\11\66\2\32\4\0\1\32\2\0\1\66"+
    "\2\0\26\32\4\66\1\32\11\66\1\32\3\66\1\32"+
    "\5\66\22\0\31\32\3\66\4\0\13\32\65\0\25\32"+
    "\1\0\10\32\25\0\17\66\1\0\41\66\66\32\3\66"+
    "\1\32\22\66\1\32\7\66\12\32\2\66\2\0\12\66"+
    "\1\0\20\32\3\66\1\0\10\32\2\0\2\32\2\0"+
    "\26\32\1\0\7\32\1\0\1\32\3\0\4\32\2\0"+
    "\1\66\1\32\7\66\2\0\2\66\2\0\3\66\1\32"+
    "\10\0\1\66\4\0\2\32\1\0\3\32\2\66\2\0"+
    "\12\66\2\32\12\0\1\32\1\0\1\66\2\0\3\66"+
    "\1\0\6\32\4\0\2\32\2\0\26\32\1\0\7\32"+
    "\1\0\2\32\1\0\2\32\1\0\2\32\2\0\1\66"+
    "\1\0\5\66\4\0\2\66\2\0\3\66\3\0\1\66"+
    "\7\0\4\32\1\0\1\32\7\0\14\66\3\32\1\66"+
    "\13\0\3\66\1\0\11\32\1\0\3\32\1\0\26\32"+
    "\1\0\7\32\1\0\2\32\1\0\5\32\2\0\1\66"+
    "\1\32\10\66\1\0\3\66\1\0\3\66\2\0\1\32"+
    "\17\0\2\32\2\66\2\0\12\66\11\0\1\32\6\66"+
    "\1\0\3\66\1\0\10\32\2\0\2\32\2\0\26\32"+
    "\1\0\7\32\1\0\2\32\1\0\5\32\2\0\1\66"+
    "\1\32\7\66\2\0\2\66\2\0\3\66\10\0\2\66"+
    "\4\0\2\32\1\0\3\32\2\66\2\0\12\66\1\0"+
    "\1\32\20\0\1\66\1\32\1\0\6\32\3\0\3\32"+
    "\1\0\4\32\3\0\2\32\1\0\1\32\1\0\2\32"+
    "\3\0\2\32\3\0\3\32\3\0\14\32\4\0\5\66"+
    "\3\0\3\66\1\0\4\66\2\0\1\32\6\0\1\66"+
    "\16\0\12\66\20\0\5\66\10\32\1\0\3\32\1\0"+
    "\27\32\1\0\20\32\3\0\1\32\7\66\1\0\3\66"+
    "\1\0\4\66\7\0\2\66\1\0\3\32\5\0\2\32"+
    "\2\66\2\0\12\66\20\0\1\32\3\66\1\0\10\32"+
    "\1\0\3\32\1\0\27\32\1\0\12\32\1\0\5\32"+
    "\2\0\1\66\1\32\7\66\1\0\3\66\1\0\4\66"+
    "\7\0\2\66\7\0\1\32\1\0\2\32\2\66\2\0"+
    "\12\66\1\0\2\32\15\0\4\66\1\0\10\32\1\0"+
    "\3\32\1\0\51\32\2\66\1\32\7\66\1\0\3\66"+
    "\1\0\4\66\1\32\5\0\3\32\1\66\7\0\3\32"+
    "\2\66\2\0\12\66\12\0\6\32\2\0\2\66\1\0"+
    "\22\32\3\0\30\32\1\0\11\32\1\0\1\32\2\0"+
    "\7\32\3\0\1\66\4\0\6\66\1\0\1\66\1\0"+
    "\10\66\6\0\12\66\2\0\2\66\15\0\60\32\1\66"+
    "\1\32\10\66\5\0\7\32\10\66\1\0\12\66\47\0"+
    "\2\32\1\0\1\32\1\0\5\32\1\0\30\32\1\0"+
    "\1\32\1\0\12\32\1\66\1\32\12\66\1\32\2\0"+
    "\5\32\1\0\1\32\1\0\6\66\2\0\12\66\2\0"+
    "\4\32\40\0\1\32\27\0\2\66\6\0\12\66\13\0"+
    "\1\66\1\0\1\66\1\0\1\66\4\0\2\66\10\32"+
    "\1\0\44\32\4\0\24\66\1\0\2\66\5\32\13\66"+
    "\1\0\44\66\11\0\1\66\71\0\53\32\24\66\1\32"+
    "\12\66\6\0\6\32\4\66\4\32\3\66\1\32\3\66"+
    "\2\32\7\66\3\32\4\66\15\32\14\66\1\32\17\66"+
    "\2\0\46\32\1\0\1\32\5\0\1\32\2\0\53\32"+
    "\1\0\115\32\1\0\4\32\2\0\7\32\1\0\1\32"+
    "\1\0\4\32\2\0\51\32\1\0\4\32\2\0\41\32"+
    "\1\0\4\32\2\0\7\32\1\0\1\32\1\0\4\32"+
    "\2\0\17\32\1\0\71\32\1\0\4\32\2\0\103\32"+
    "\2\0\3\66\11\0\11\66\16\0\20\32\20\0\126\32"+
    "\2\0\6\32\3\0\u016c\32\2\0\21\32\1\1\32\32"+
    "\5\0\113\32\3\0\13\32\7\0\15\32\1\0\4\32"+
    "\3\66\13\0\22\32\3\66\13\0\22\32\2\66\14\0"+
    "\15\32\1\0\3\32\1\0\2\66\14\0\64\32\40\66"+
    "\3\0\1\32\4\0\1\32\1\66\2\0\12\66\41\0"+
    "\3\66\2\0\12\66\6\0\131\32\7\0\51\32\1\66"+
    "\1\32\5\0\106\32\12\0\37\32\1\0\14\66\4\0"+
    "\14\66\12\0\12\66\36\32\2\0\5\32\13\0\54\32"+
    "\4\0\32\32\6\0\13\66\45\0\27\32\5\66\4\0"+
    "\65\32\12\66\1\0\35\66\2\0\13\66\6\0\12\66"+
    "\15\0\1\32\10\0\16\66\102\0\5\66\57\32\21\66"+
    "\7\32\4\0\12\66\21\0\11\66\14\0\3\66\36\32"+
    "\15\66\2\32\12\66\54\32\16\66\14\0\44\32\24\66"+
    "\10\0\12\66\3\0\3\32\12\66\44\32\2\0\11\32"+
    "\7\0\53\32\2\0\3\32\20\0\3\66\1\0\25\66"+
    "\4\32\1\66\6\32\1\66\2\32\3\66\1\32\5\0"+
    "\300\32\72\66\1\0\5\66\26\32\2\0\6\32\2\0"+
    "\46\32\2\0\6\32\2\0\10\32\1\0\1\32\1\0"+
    "\1\32\1\0\1\32\1\0\37\32\2\0\65\32\1\0"+
    "\7\32\1\0\1\32\3\0\3\32\1\0\7\32\3\0"+
    "\4\32\2\0\6\32\4\0\15\32\5\0\3\32\1\0"+
    "\7\32\3\0\13\1\35\0\2\3\5\0\1\1\17\0"+
    "\2\66\23\0\1\66\12\0\1\1\21\0\1\32\15\0"+
    "\1\32\20\0\15\32\63\0\15\66\4\0\1\66\3\0"+
    "\14\66\21\0\1\32\4\0\1\32\2\0\12\32\1\0"+
    "\1\32\2\0\6\32\6\0\1\32\1\0\1\32\1\0"+
    "\1\32\1\0\20\32\2\0\4\32\5\0\5\32\4\0"+
    "\1\32\21\0\51\32\u0177\0\57\32\1\0\57\32\1\0"+
    "\205\32\6\0\4\32\3\66\2\32\14\0\46\32\1\0"+
    "\1\32\5\0\1\32\2\0\70\32\7\0\1\32\17\0"+
    "\1\66\27\32\11\0\7\32\1\0\7\32\1\0\7\32"+
    "\1\0\7\32\1\0\7\32\1\0\7\32\1\0\7\32"+
    "\1\0\7\32\1\0\40\66\1\1\4\0\3\32\31\0"+
    "\11\32\6\66\1\0\5\32\2\0\5\32\4\0\126\32"+
    "\2\0\2\66\2\0\3\32\1\0\132\32\1\0\4\32"+
    "\5\0\53\32\1\0\136\32\21\0\33\32\65\0\306\32"+
    "\112\0\360\32\20\0\215\32\103\0\56\32\2\0\15\32"+
    "\3\0\20\32\12\66\2\32\24\0\57\32\1\66\4\0"+
    "\12\66\1\0\37\32\2\66\120\32\2\66\45\0\11\32"+
    "\2\0\147\32\2\0\65\32\2\0\5\32\60\0\13\32"+
    "\1\66\3\32\1\66\4\32\1\66\27\32\5\66\30\0"+
    "\64\32\14\0\2\66\62\32\22\66\12\0\12\66\6\0"+
    "\22\66\6\32\3\0\1\32\1\0\2\32\13\66\34\32"+
    "\10\66\2\0\27\32\15\66\14\0\35\32\3\0\4\66"+
    "\57\32\16\66\16\0\1\32\12\66\6\0\5\32\1\66"+
    "\12\32\12\66\5\32\1\0\51\32\16\66\11\0\3\32"+
    "\1\66\10\32\2\66\2\0\12\66\6\0\27\32\3\0"+
    "\1\32\3\66\62\32\1\66\1\32\3\66\2\32\2\66"+
    "\5\32\2\66\1\32\1\66\1\32\30\0\3\32\2\0"+
    "\13\32\5\66\2\0\3\32\2\66\12\0\6\32\2\0"+
    "\6\32\2\0\6\32\11\0\7\32\1\0\7\32\1\0"+
    "\53\32\1\0\14\32\10\0\163\32\10\66\1\0\2\66"+
    "\2\0\12\66\6\0\244\32\14\0\27\32\4\0\61\32"+
    "\4\0\u0100\67\156\32\2\0\152\32\46\0\7\32\14\0"+
    "\5\32\5\0\1\32\1\66\12\32\1\0\15\32\1\0"+
    "\5\32\1\0\1\32\1\0\2\32\1\0\2\32\1\0"+
    "\154\32\41\0\213\32\6\0\332\32\22\0\100\32\2\0"+
    "\66\32\50\0\12\32\6\0\20\66\20\0\20\66\3\0"+
    "\2\66\30\0\3\66\41\0\1\32\1\0\1\32\3\0"+
    "\1\32\1\0\1\32\1\0\1\32\1\0\1\32\1\0"+
    "\176\32\23\0\12\66\7\0\32\32\4\0\1\66\1\0"+
    "\32\32\13\0\70\32\2\66\37\32\3\0\6\32\2\0"+
    "\6\32\2\0\6\32\2\0\3\32\43\0\14\32\1\0"+
    "\32\32\1\0\23\32\1\0\2\32\1\0\17\32\2\0"+
    "\16\32\42\0\173\32\105\0\65\32\210\0\1\66\202\0"+
    "\35\32\3\0\61\32\17\0\1\66\37\0\40\32\15\0"+
    "\36\32\5\0\46\32\5\66\5\0\36\32\2\0\44\32"+
    "\4\0\10\32\1\0\5\32\52\0\236\32\2\0\12\66"+
    "\6\0\44\32\4\0\44\32\4\0\50\32\10\0\64\32"+
    "\234\0\67\32\11\0\26\32\12\0\10\32\230\0\6\32"+
    "\2\0\1\32\1\0\54\32\1\0\2\32\3\0\1\32"+
    "\2\0\27\32\12\0\27\32\11\0\37\32\101\0\23\32"+
    "\1\0\2\32\12\0\26\32\12\0\32\32\106\0\70\32"+
    "\6\0\2\32\100\0\1\32\3\66\1\0\2\66\5\0"+
    "\4\66\4\32\1\0\3\32\1\0\35\32\2\0\3\66"+
    "\4\0\1\66\40\0\35\32\3\0\35\32\43\0\10\32"+
    "\1\0\34\32\2\66\31\0\66\32\12\0\26\32\12\0"+
    "\23\32\15\0\22\32\156\0\111\32\67\0\63\32\15\0"+
    "\63\32\15\0\44\32\4\66\10\0\12\66\306\0\35\32"+
    "\12\0\1\32\10\0\26\32\13\66\217\0\27\32\11\0"+
    "\3\66\65\32\17\66\37\0\12\66\17\0\4\66\55\32"+
    "\13\66\25\0\31\32\7\0\12\66\6\0\3\66\44\32"+
    "\16\66\1\0\12\66\4\0\1\32\2\66\11\0\43\32"+
    "\1\66\2\0\1\32\11\0\3\66\60\32\16\66\4\32"+
    "\4\0\4\66\3\0\12\66\1\32\1\0\1\32\43\0"+
    "\22\32\1\0\31\32\14\66\6\0\1\66\101\0\7\32"+
    "\1\0\1\32\1\0\4\32\1\0\17\32\1\0\12\32"+
    "\7\0\57\32\14\66\5\0\12\66\6\0\4\66\1\0"+
    "\10\32\2\0\2\32\2\0\26\32\1\0\7\32\1\0"+
    "\2\32\1\0\5\32\1\0\2\66\1\32\7\66\2\0"+
    "\2\66\2\0\3\66\2\0\1\32\6\0\1\66\5\0"+
    "\5\32\2\66\2\0\7\66\3\0\5\66\213\0\65\32"+
    "\22\66\4\32\5\0\12\66\4\0\1\66\1\32\40\0"+
    "\60\32\24\66\2\32\1\0\1\32\10\0\12\66\246\0"+
    "\57\32\7\66\2\0\11\66\27\0\4\32\2\66\42\0"+
    "\60\32\21\66\3\0\1\32\13\0\12\66\46\0\53\32"+
    "\15\66\1\32\7\0\12\66\66\0\33\32\2\0\17\66"+
    "\4\0\12\66\306\0\54\32\17\66\145\0\100\32\12\66"+
    "\25\0\1\32\240\0\10\32\2\0\47\32\7\66\2\0"+
    "\7\66\1\32\1\0\1\32\1\66\33\0\1\32\12\66"+
    "\50\32\7\66\1\32\4\66\10\0\1\66\10\0\1\32"+
    "\13\66\56\32\20\66\3\0\1\32\42\0\71\32\7\0"+
    "\11\32\1\0\45\32\10\66\1\0\10\66\1\32\17\0"+
    "\12\66\30\0\36\32\2\0\26\66\1\0\16\66\111\0"+
    "\7\32\1\0\2\32\1\0\46\32\6\66\3\0\1\66"+
    "\1\0\2\66\1\0\7\66\1\32\1\66\10\0\12\66"+
    "\6\0\6\32\1\0\2\32\1\0\40\32\5\66\1\0"+
    "\2\66\1\0\5\66\1\32\7\0\12\66\u0136\0\23\32"+
    "\4\66\11\0\232\32\146\0\157\32\21\0\304\32\274\0"+
    "\57\32\321\0\107\32\271\0\71\32\7\0\37\32\1\0"+
    "\12\66\146\0\36\32\2\0\5\66\13\0\60\32\7\66"+
    "\11\0\4\32\14\0\12\66\11\0\25\32\5\0\23\32"+
    "\260\0\100\32\200\0\113\32\4\0\1\66\1\32\67\66"+
    "\7\0\4\66\15\32\100\0\2\32\1\0\1\32\34\0"+
    "\370\32\10\0\363\32\15\0\37\32\61\0\3\32\21\0"+
    "\4\32\10\0\u018c\32\4\0\153\32\5\0\15\32\3\0"+
    "\11\32\7\0\12\32\3\0\2\66\306\0\5\66\3\0"+
    "\6\66\10\0\10\66\2\0\7\66\36\0\4\66\224\0"+
    "\3\66\273\0\125\32\1\0\107\32\1\0\2\32\2\0"+
    "\1\32\2\0\2\32\2\0\4\32\1\0\14\32\1\0"+
    "\1\32\1\0\7\32\1\0\101\32\1\0\4\32\2\0"+
    "\10\32\1\0\7\32\1\0\34\32\1\0\4\32\1\0"+
    "\5\32\1\0\1\32\3\0\7\32\1\0\u0154\32\2\0"+
    "\31\32\1\0\31\32\1\0\37\32\1\0\31\32\1\0"+
    "\37\32\1\0\31\32\1\0\37\32\1\0\31\32\1\0"+
    "\37\32\1\0\31\32\1\0\10\32\2\0\151\66\4\0"+
    "\62\66\10\0\1\66\16\0\1\66\26\0\5\66\1\0"+
    "\17\66\120\0\7\66\1\0\21\66\2\0\7\66\1\0"+
    "\2\66\1\0\5\66\325\0\55\32\3\0\7\66\7\32"+
    "\2\0\12\66\4\0\1\32\u0171\0\54\32\16\66\6\0"+
    "\305\32\13\0\7\66\51\0\104\32\7\66\1\32\4\0"+
    "\12\66\246\0\4\32\1\0\33\32\1\0\2\32\1\0"+
    "\1\32\2\0\1\32\1\0\12\32\1\0\4\32\1\0"+
    "\1\32\1\0\1\32\6\0\1\32\4\0\1\32\1\0"+
    "\1\32\1\0\1\32\1\0\3\32\1\0\2\32\1\0"+
    "\1\32\2\0\1\32\1\0\1\32\1\0\1\32\1\0"+
    "\1\32\1\0\1\32\1\0\2\32\1\0\1\32\2\0"+
    "\4\32\1\0\7\32\1\0\4\32\1\0\4\32\1\0"+
    "\1\32\1\0\12\32\1\0\21\32\5\0\3\32\1\0"+
    "\5\32\1\0\21\32\104\0\327\32\51\0\65\32\13\0"+
    "\336\32\2\0\u0182\32\16\0\u0131\32\37\0\36\32\342\0"+
    "\360\66\20\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\2\1\4\1\3\1\5"+
    "\1\6\2\3\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\3\1\31\1\32\1\27"+
    "\1\3\10\27\1\33\1\34\1\35\1\36\1\37\1\0"+
    "\1\40\1\0\1\41\1\0\1\42\1\0\1\43\2\0"+
    "\1\44\2\0\1\45\1\46\1\0\1\47\1\50\4\27"+
    "\1\51\2\27\1\52\1\27\1\53\2\27\1\37\1\40"+
    "\1\54\1\0\1\54\1\0\2\27\1\55\1\56\1\51"+
    "\4\27\1\57\2\0\1\60\1\61\1\51\6\27\1\62"+
    "\1\63\1\27\1\64\1\27";

  private static int [] zzUnpackAction() {
    int [] result = new int[111];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0118"+
    "\0\u0188\0\u0118\0\u0118\0\u01c0\0\u01f8\0\u0118\0\u0118\0\u0118"+
    "\0\u0118\0\u0118\0\u0230\0\u0118\0\u0268\0\u02a0\0\u0118\0\u0118"+
    "\0\u0118\0\u02d8\0\u0118\0\u02d8\0\u0118\0\u0310\0\u0348\0\u0380"+
    "\0\u0118\0\u0118\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0"+
    "\0\u0508\0\u0540\0\u0578\0\u05b0\0\u0118\0\u0118\0\u0118\0\u02d8"+
    "\0\u05e8\0\u0188\0\u0118\0\u0620\0\u0118\0\u01f8\0\u0118\0\u01c0"+
    "\0\u0118\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0348\0\u0118\0\u0118"+
    "\0\u03f0\0\u0118\0\u0310\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0310"+
    "\0\u0818\0\u0850\0\u0310\0\u0888\0\u0310\0\u08c0\0\u08f8\0\u0118"+
    "\0\u0188\0\u0118\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0310"+
    "\0\u0310\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0118\0\u0968"+
    "\0\u0b60\0\u0310\0\u0310\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78"+
    "\0\u0cb0\0\u0ce8\0\u0310\0\u0310\0\u0d20\0\u0310\0\u0d58";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[111];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\4\21\3\1\5\42\3\1\6\3\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\36\1\52\1\36\1\53\7\36\1\54\1\55"+
    "\1\56\1\57\1\60\2\6\25\3\1\0\43\3\3\4"+
    "\21\3\1\0\42\3\10\0\1\61\150\0\3\7\64\0"+
    "\5\62\1\63\26\62\1\64\33\62\27\0\1\65\40\0"+
    "\11\66\1\67\56\66\10\0\1\70\16\0\1\71\40\0"+
    "\14\72\1\73\4\72\1\74\12\72\1\75\33\72\22\0"+
    "\1\26\55\0\1\70\101\0\1\36\7\0\1\36\4\0"+
    "\1\36\1\0\21\36\4\0\1\36\1\0\35\76\1\77"+
    "\32\76\2\100\2\0\63\100\11\0\1\70\11\0\1\36"+
    "\7\0\1\36\4\0\1\36\1\0\21\36\4\0\1\36"+
    "\1\0\40\101\1\102\27\101\22\0\1\36\7\0\1\36"+
    "\4\0\1\36\1\0\15\36\1\103\3\36\4\0\1\36"+
    "\23\0\1\36\7\0\1\36\4\0\1\36\1\0\1\104"+
    "\20\36\4\0\1\36\23\0\1\36\7\0\1\36\4\0"+
    "\1\36\1\0\3\36\1\105\15\36\4\0\1\36\23\0"+
    "\1\36\7\0\1\36\4\0\1\36\1\0\7\36\1\106"+
    "\1\36\1\107\7\36\4\0\1\36\23\0\1\36\7\0"+
    "\1\36\4\0\1\36\1\0\11\36\1\110\1\111\4\36"+
    "\1\112\1\36\4\0\1\36\23\0\1\36\7\0\1\36"+
    "\4\0\1\36\1\0\4\36\1\113\3\36\1\114\1\115"+
    "\7\36\4\0\1\36\23\0\1\36\7\0\1\36\4\0"+
    "\1\36\1\0\1\116\20\36\4\0\1\36\23\0\1\36"+
    "\7\0\1\36\4\0\1\36\1\0\5\36\1\117\13\36"+
    "\4\0\1\36\20\0\1\120\6\0\1\120\1\0\1\120"+
    "\6\0\1\120\25\0\1\120\2\0\5\62\1\121\26\62"+
    "\1\64\33\62\21\72\1\122\12\72\1\75\33\72\14\73"+
    "\1\123\4\73\1\124\12\73\1\125\33\73\2\74\1\0"+
    "\65\74\2\72\2\0\63\72\23\0\1\36\7\0\1\36"+
    "\4\0\1\36\1\0\15\36\1\126\3\36\4\0\1\36"+
    "\23\0\1\36\7\0\1\36\4\0\1\36\1\0\4\36"+
    "\1\110\14\36\4\0\1\36\23\0\1\36\7\0\1\36"+
    "\4\0\1\36\1\0\15\36\1\127\3\36\4\0\1\36"+
    "\23\0\1\36\7\0\1\36\4\0\1\36\1\0\2\36"+
    "\1\130\16\36\4\0\1\36\23\0\1\36\7\0\1\36"+
    "\4\0\1\36\1\0\14\36\1\131\4\36\4\0\1\36"+
    "\23\0\1\36\7\0\1\36\4\0\1\36\1\0\11\36"+
    "\1\132\7\36\4\0\1\36\23\0\1\36\7\0\1\36"+
    "\4\0\1\36\1\0\13\36\1\133\5\36\4\0\1\36"+
    "\23\0\1\36\7\0\1\36\4\0\1\36\1\0\1\36"+
    "\1\134\14\36\1\135\2\36\4\0\1\36\23\0\1\36"+
    "\7\0\1\36\4\0\1\36\1\0\6\36\1\136\12\36"+
    "\4\0\1\36\1\0\14\73\1\123\4\73\1\137\12\73"+
    "\1\125\33\73\14\140\1\141\53\140\2\73\2\140\10\73"+
    "\1\123\52\73\1\140\22\0\1\36\7\0\1\36\4\0"+
    "\1\36\1\0\3\36\1\142\15\36\4\0\1\36\23\0"+
    "\1\36\7\0\1\36\4\0\1\36\1\0\3\36\1\143"+
    "\15\36\4\0\1\36\23\0\1\36\7\0\1\36\4\0"+
    "\1\36\1\0\1\36\1\144\17\36\4\0\1\36\23\0"+
    "\1\36\7\0\1\36\4\0\1\36\1\0\12\36\1\145"+
    "\6\36\4\0\1\36\23\0\1\36\7\0\1\36\4\0"+
    "\1\36\1\0\14\36\1\146\4\36\4\0\1\36\23\0"+
    "\1\36\7\0\1\36\4\0\1\36\1\0\1\36\1\147"+
    "\17\36\4\0\1\36\23\0\1\36\7\0\1\36\4\0"+
    "\1\36\1\0\7\36\1\150\11\36\4\0\1\36\1\0"+
    "\14\140\1\141\4\140\1\137\46\140\22\0\1\36\7\0"+
    "\1\36\4\0\1\36\1\0\16\36\1\151\2\36\4\0"+
    "\1\36\23\0\1\36\7\0\1\36\4\0\1\36\1\0"+
    "\14\36\1\152\4\36\4\0\1\36\23\0\1\36\7\0"+
    "\1\36\4\0\1\36\1\0\12\36\1\110\6\36\4\0"+
    "\1\36\23\0\1\36\7\0\1\36\4\0\1\36\1\0"+
    "\5\36\1\153\13\36\4\0\1\36\23\0\1\36\7\0"+
    "\1\36\4\0\1\36\1\0\3\36\1\154\15\36\4\0"+
    "\1\36\23\0\1\36\7\0\1\36\4\0\1\36\1\0"+
    "\6\36\1\155\12\36\4\0\1\36\23\0\1\36\7\0"+
    "\1\36\4\0\1\36\1\0\16\36\1\156\2\36\4\0"+
    "\1\36\23\0\1\36\7\0\1\36\4\0\1\36\1\0"+
    "\12\36\1\157\6\36\4\0\1\36\23\0\1\36\7\0"+
    "\1\36\4\0\1\36\1\0\11\36\1\110\7\36\4\0"+
    "\1\36\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3472];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\3\1\1\11\1\1\1\11\1\1\2\11\2\1"+
    "\5\11\1\1\1\11\2\1\3\11\1\1\1\11\1\1"+
    "\1\11\3\1\2\11\12\1\3\11\2\1\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\1"+
    "\2\0\2\11\1\0\1\11\15\1\1\11\1\1\1\11"+
    "\1\0\1\1\1\0\11\1\1\11\2\0\16\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[111];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _DejavuLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public com.intellij.psi.tree.IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return NORMAL_TEXT;
            }
          // fall through
          case 53: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 54: break;
          case 3:
            { return BAD_CHARACTER;
            }
          // fall through
          case 55: break;
          case 4:
            { return OP_NOT;
            }
          // fall through
          case 56: break;
          case 5:
            { return HASH;
            }
          // fall through
          case 57: break;
          case 6:
            { return DOLLAR;
            }
          // fall through
          case 58: break;
          case 7:
            { return PARENTHESIS_L;
            }
          // fall through
          case 59: break;
          case 8:
            { return PARENTHESIS_R;
            }
          // fall through
          case 60: break;
          case 9:
            { return OP_MANY;
            }
          // fall through
          case 61: break;
          case 10:
            { return OP_MANY1;
            }
          // fall through
          case 62: break;
          case 11:
            { return COMMA;
            }
          // fall through
          case 63: break;
          case 12:
            { return HYPHEN;
            }
          // fall through
          case 64: break;
          case 13:
            { return DOT;
            }
          // fall through
          case 65: break;
          case 14:
            { return SLASH;
            }
          // fall through
          case 66: break;
          case 15:
            { return INTEGER;
            }
          // fall through
          case 67: break;
          case 16:
            { return COLON;
            }
          // fall through
          case 68: break;
          case 17:
            { return SEMICOLON;
            }
          // fall through
          case 69: break;
          case 18:
            { return ANGLE_L;
            }
          // fall through
          case 70: break;
          case 19:
            { return EQ;
            }
          // fall through
          case 71: break;
          case 20:
            { return ANGLE_R;
            }
          // fall through
          case 72: break;
          case 21:
            { return OP_OPTIONAL;
            }
          // fall through
          case 73: break;
          case 22:
            { return AT;
            }
          // fall through
          case 74: break;
          case 23:
            { return SYMBOL;
            }
          // fall through
          case 75: break;
          case 24:
            { return BRACKET_L;
            }
          // fall through
          case 76: break;
          case 25:
            { return BRACKET_R;
            }
          // fall through
          case 77: break;
          case 26:
            { return OP_REMARK;
            }
          // fall through
          case 78: break;
          case 27:
            { return BRACE_L;
            }
          // fall through
          case 79: break;
          case 28:
            { return OP_OR;
            }
          // fall through
          case 80: break;
          case 29:
            { return BRACE_R;
            }
          // fall through
          case 81: break;
          case 30:
            { return OP_CONCAT;
            }
          // fall through
          case 82: break;
          case 31:
            { yybegin(ProgramContext);
          return TEMPLATE_L;
            }
          // fall through
          case 83: break;
          case 32:
            { return TEXT_DOUBLE;
            }
          // fall through
          case 84: break;
          case 33:
            { yybegin(YYINITIAL);
		  return TEMPLATE_R;
            }
          // fall through
          case 85: break;
          case 34:
            { return TEXT_SINGLE;
            }
          // fall through
          case 86: break;
          case 35:
            { return TO;
            }
          // fall through
          case 87: break;
          case 36:
            { return COMMENT_LINE;
            }
          // fall through
          case 88: break;
          case 37:
            { return REGULAR_RANGE;
            }
          // fall through
          case 89: break;
          case 38:
            { return ESCAPED;
            }
          // fall through
          case 90: break;
          case 39:
            { return SYMBOW_RAW;
            }
          // fall through
          case 91: break;
          case 40:
            { return KW_AS;
            }
          // fall through
          case 92: break;
          case 41:
            { return KW_MACRO;
            }
          // fall through
          case 93: break;
          case 42:
            { return KW_IF;
            }
          // fall through
          case 94: break;
          case 43:
            { return KW_IN;
            }
          // fall through
          case 95: break;
          case 44:
            { return REGULAR_EXPRESSION;
            }
          // fall through
          case 96: break;
          case 45:
            { return KW_END;
            }
          // fall through
          case 97: break;
          case 46:
            { return KW_FOR;
            }
          // fall through
          case 98: break;
          case 47:
            { return COMMENT_BLOCK;
            }
          // fall through
          case 99: break;
          case 48:
            { return KW_CASE;
            }
          // fall through
          case 100: break;
          case 49:
            { return KW_ELSE;
            }
          // fall through
          case 101: break;
          case 50:
            { return KW_MATCH;
            }
          // fall through
          case 102: break;
          case 51:
            { return KW_WHILE;
            }
          // fall through
          case 103: break;
          case 52:
            { return KW_IMPORT;
            }
          // fall through
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
