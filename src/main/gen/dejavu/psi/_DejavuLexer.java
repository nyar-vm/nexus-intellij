// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: dejavu.flex

package dejavu.psi;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static dejavu.psi.DejavuTypes.*;


public class _DejavuLexer implements com.intellij.lexer.FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ProgramContext = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\1\u1f00\11\u2000\1\u2100\1\u2200\2\u2000\1\u2300"+
    "\1\u2400\2\u2000\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u2000\1\u0100\1\u3000\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00\1\u3b00"+
    "\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u2000\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u2000\1\u4f00\1\u5000"+
    "\1\u5100\1\u2000\3\u0100\1\u5200\1\u5300\1\u5400\12\u2000\4\u0100"+
    "\1\u5500\17\u2000\2\u0100\1\u5600\41\u2000\2\u0100\1\u5700\1\u5800"+
    "\2\u2000\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100\1\u5c00\45\u2000"+
    "\1\u0100\1\u5d00\1\u5e00\11\u2000\1\u5f00\24\u2000\1\u6000\1\u6100"+
    "\1\u2000\1\u6200\1\u6300\1\u6400\1\u6500\2\u2000\1\u6600\5\u2000"+
    "\1\u6700\1\u6800\1\u6900\5\u2000\1\u6a00\1\u6b00\4\u2000\1\u6c00"+
    "\21\u2000\246\u0100\1\u6d00\20\u0100\1\u6e00\1\u6f00\25\u0100\1\u7000"+
    "\34\u0100\1\u7100\14\u2000\2\u0100\1\u7200\u0b06\u2000\1\u7300\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\3\0"+
    "\1\4\1\5\2\0\1\6\1\7\1\10\1\0\1\11"+
    "\1\12\1\13\1\14\12\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\32\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\25\1\35\1\36\1\37\1\40"+
    "\1\25\1\41\1\42\1\25\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\25\1\51\1\52\1\53\1\25\1\54"+
    "\1\55\1\56\2\25\1\57\1\60\1\61\1\62\6\0"+
    "\1\3\32\0\1\1\11\0\1\25\12\0\1\25\1\0"+
    "\1\63\2\0\1\25\5\0\27\25\1\0\37\25\1\0"+
    "\u01ca\25\4\0\14\25\16\0\5\25\7\0\1\25\1\0"+
    "\1\25\21\0\160\63\5\25\1\0\2\25\3\0\3\25"+
    "\1\0\1\25\6\0\1\25\1\63\3\25\1\0\1\25"+
    "\1\0\24\25\1\0\123\25\1\0\213\25\1\0\5\63"+
    "\2\0\246\25\1\0\46\25\2\0\1\25\6\0\51\25"+
    "\10\0\55\63\1\0\1\63\1\0\2\63\1\0\2\63"+
    "\1\0\1\63\10\0\33\25\4\0\4\25\35\0\13\63"+
    "\5\0\53\25\37\63\4\0\2\25\1\63\143\25\1\0"+
    "\1\25\7\63\2\0\6\63\2\25\2\63\1\0\4\63"+
    "\2\25\12\63\3\25\2\0\1\25\20\0\1\25\1\63"+
    "\36\25\33\63\2\0\131\25\13\63\1\25\16\0\12\63"+
    "\41\25\11\63\2\25\4\0\1\25\2\0\1\63\2\0"+
    "\26\25\4\63\1\25\11\63\1\25\3\63\1\25\5\63"+
    "\22\0\31\25\3\63\4\0\13\25\65\0\25\25\1\0"+
    "\10\25\25\0\17\63\1\0\41\63\66\25\3\63\1\25"+
    "\22\63\1\25\7\63\12\25\2\63\2\0\12\63\1\0"+
    "\20\25\3\63\1\0\10\25\2\0\2\25\2\0\26\25"+
    "\1\0\7\25\1\0\1\25\3\0\4\25\2\0\1\63"+
    "\1\25\7\63\2\0\2\63\2\0\3\63\1\25\10\0"+
    "\1\63\4\0\2\25\1\0\3\25\2\63\2\0\12\63"+
    "\2\25\12\0\1\25\1\0\1\63\2\0\3\63\1\0"+
    "\6\25\4\0\2\25\2\0\26\25\1\0\7\25\1\0"+
    "\2\25\1\0\2\25\1\0\2\25\2\0\1\63\1\0"+
    "\5\63\4\0\2\63\2\0\3\63\3\0\1\63\7\0"+
    "\4\25\1\0\1\25\7\0\14\63\3\25\1\63\13\0"+
    "\3\63\1\0\11\25\1\0\3\25\1\0\26\25\1\0"+
    "\7\25\1\0\2\25\1\0\5\25\2\0\1\63\1\25"+
    "\10\63\1\0\3\63\1\0\3\63\2\0\1\25\17\0"+
    "\2\25\2\63\2\0\12\63\11\0\1\25\6\63\1\0"+
    "\3\63\1\0\10\25\2\0\2\25\2\0\26\25\1\0"+
    "\7\25\1\0\2\25\1\0\5\25\2\0\1\63\1\25"+
    "\7\63\2\0\2\63\2\0\3\63\10\0\2\63\4\0"+
    "\2\25\1\0\3\25\2\63\2\0\12\63\1\0\1\25"+
    "\20\0\1\63\1\25\1\0\6\25\3\0\3\25\1\0"+
    "\4\25\3\0\2\25\1\0\1\25\1\0\2\25\3\0"+
    "\2\25\3\0\3\25\3\0\14\25\4\0\5\63\3\0"+
    "\3\63\1\0\4\63\2\0\1\25\6\0\1\63\16\0"+
    "\12\63\20\0\5\63\10\25\1\0\3\25\1\0\27\25"+
    "\1\0\20\25\3\0\1\25\7\63\1\0\3\63\1\0"+
    "\4\63\7\0\2\63\1\0\3\25\5\0\2\25\2\63"+
    "\2\0\12\63\20\0\1\25\3\63\1\0\10\25\1\0"+
    "\3\25\1\0\27\25\1\0\12\25\1\0\5\25\2\0"+
    "\1\63\1\25\7\63\1\0\3\63\1\0\4\63\7\0"+
    "\2\63\7\0\1\25\1\0\2\25\2\63\2\0\12\63"+
    "\1\0\2\25\15\0\4\63\1\0\10\25\1\0\3\25"+
    "\1\0\51\25\2\63\1\25\7\63\1\0\3\63\1\0"+
    "\4\63\1\25\5\0\3\25\1\63\7\0\3\25\2\63"+
    "\2\0\12\63\12\0\6\25\2\0\2\63\1\0\22\25"+
    "\3\0\30\25\1\0\11\25\1\0\1\25\2\0\7\25"+
    "\3\0\1\63\4\0\6\63\1\0\1\63\1\0\10\63"+
    "\6\0\12\63\2\0\2\63\15\0\60\25\1\63\1\25"+
    "\10\63\5\0\7\25\10\63\1\0\12\63\47\0\2\25"+
    "\1\0\1\25\1\0\5\25\1\0\30\25\1\0\1\25"+
    "\1\0\12\25\1\63\1\25\12\63\1\25\2\0\5\25"+
    "\1\0\1\25\1\0\6\63\2\0\12\63\2\0\4\25"+
    "\40\0\1\25\27\0\2\63\6\0\12\63\13\0\1\63"+
    "\1\0\1\63\1\0\1\63\4\0\2\63\10\25\1\0"+
    "\44\25\4\0\24\63\1\0\2\63\5\25\13\63\1\0"+
    "\44\63\11\0\1\63\71\0\53\25\24\63\1\25\12\63"+
    "\6\0\6\25\4\63\4\25\3\63\1\25\3\63\2\25"+
    "\7\63\3\25\4\63\15\25\14\63\1\25\17\63\2\0"+
    "\46\25\1\0\1\25\5\0\1\25\2\0\53\25\1\0"+
    "\115\25\1\0\4\25\2\0\7\25\1\0\1\25\1\0"+
    "\4\25\2\0\51\25\1\0\4\25\2\0\41\25\1\0"+
    "\4\25\2\0\7\25\1\0\1\25\1\0\4\25\2\0"+
    "\17\25\1\0\71\25\1\0\4\25\2\0\103\25\2\0"+
    "\3\63\11\0\11\63\16\0\20\25\20\0\126\25\2\0"+
    "\6\25\3\0\u016c\25\2\0\21\25\1\1\32\25\5\0"+
    "\113\25\3\0\13\25\7\0\15\25\1\0\4\25\3\63"+
    "\13\0\22\25\3\63\13\0\22\25\2\63\14\0\15\25"+
    "\1\0\3\25\1\0\2\63\14\0\64\25\40\63\3\0"+
    "\1\25\4\0\1\25\1\63\2\0\12\63\41\0\3\63"+
    "\2\0\12\63\6\0\131\25\7\0\51\25\1\63\1\25"+
    "\5\0\106\25\12\0\37\25\1\0\14\63\4\0\14\63"+
    "\12\0\12\63\36\25\2\0\5\25\13\0\54\25\4\0"+
    "\32\25\6\0\13\63\45\0\27\25\5\63\4\0\65\25"+
    "\12\63\1\0\35\63\2\0\13\63\6\0\12\63\15\0"+
    "\1\25\10\0\16\63\102\0\5\63\57\25\21\63\7\25"+
    "\4\0\12\63\21\0\11\63\14\0\3\63\36\25\15\63"+
    "\2\25\12\63\54\25\16\63\14\0\44\25\24\63\10\0"+
    "\12\63\3\0\3\25\12\63\44\25\2\0\11\25\7\0"+
    "\53\25\2\0\3\25\20\0\3\63\1\0\25\63\4\25"+
    "\1\63\6\25\1\63\2\25\3\63\1\25\5\0\300\25"+
    "\72\63\1\0\5\63\26\25\2\0\6\25\2\0\46\25"+
    "\2\0\6\25\2\0\10\25\1\0\1\25\1\0\1\25"+
    "\1\0\1\25\1\0\37\25\2\0\65\25\1\0\7\25"+
    "\1\0\1\25\3\0\3\25\1\0\7\25\3\0\4\25"+
    "\2\0\6\25\4\0\15\25\5\0\3\25\1\0\7\25"+
    "\3\0\13\1\35\0\2\3\5\0\1\1\17\0\2\63"+
    "\23\0\1\63\12\0\1\1\21\0\1\25\15\0\1\25"+
    "\20\0\15\25\63\0\15\63\4\0\1\63\3\0\14\63"+
    "\21\0\1\25\4\0\1\25\2\0\12\25\1\0\1\25"+
    "\2\0\6\25\6\0\1\25\1\0\1\25\1\0\1\25"+
    "\1\0\20\25\2\0\4\25\5\0\5\25\4\0\1\25"+
    "\21\0\51\25\256\0\1\64\u01c8\0\57\25\1\0\57\25"+
    "\1\0\205\25\6\0\4\25\3\63\2\25\14\0\46\25"+
    "\1\0\1\25\5\0\1\25\2\0\70\25\7\0\1\25"+
    "\17\0\1\63\27\25\11\0\7\25\1\0\7\25\1\0"+
    "\7\25\1\0\7\25\1\0\7\25\1\0\7\25\1\0"+
    "\7\25\1\0\7\25\1\0\40\63\1\1\4\0\3\25"+
    "\31\0\11\25\6\63\1\0\5\25\2\0\5\25\4\0"+
    "\126\25\2\0\2\63\2\0\3\25\1\0\132\25\1\0"+
    "\4\25\5\0\53\25\1\0\136\25\21\0\33\25\65\0"+
    "\306\25\112\0\360\25\20\0\215\25\103\0\56\25\2\0"+
    "\15\25\3\0\20\25\12\63\2\25\24\0\57\25\1\63"+
    "\4\0\12\63\1\0\37\25\2\63\120\25\2\63\45\0"+
    "\11\25\2\0\147\25\2\0\65\25\2\0\5\25\60\0"+
    "\13\25\1\63\3\25\1\63\4\25\1\63\27\25\5\63"+
    "\30\0\64\25\14\0\2\63\62\25\22\63\12\0\12\63"+
    "\6\0\22\63\6\25\3\0\1\25\1\0\2\25\13\63"+
    "\34\25\10\63\2\0\27\25\15\63\14\0\35\25\3\0"+
    "\4\63\57\25\16\63\16\0\1\25\12\63\6\0\5\25"+
    "\1\63\12\25\12\63\5\25\1\0\51\25\16\63\11\0"+
    "\3\25\1\63\10\25\2\63\2\0\12\63\6\0\27\25"+
    "\3\0\1\25\3\63\62\25\1\63\1\25\3\63\2\25"+
    "\2\63\5\25\2\63\1\25\1\63\1\25\30\0\3\25"+
    "\2\0\13\25\5\63\2\0\3\25\2\63\12\0\6\25"+
    "\2\0\6\25\2\0\6\25\11\0\7\25\1\0\7\25"+
    "\1\0\53\25\1\0\14\25\10\0\163\25\10\63\1\0"+
    "\2\63\2\0\12\63\6\0\244\25\14\0\27\25\4\0"+
    "\61\25\4\0\u0100\65\156\25\2\0\152\25\46\0\7\25"+
    "\14\0\5\25\5\0\1\25\1\63\12\25\1\0\15\25"+
    "\1\0\5\25\1\0\1\25\1\0\2\25\1\0\2\25"+
    "\1\0\154\25\41\0\213\25\6\0\332\25\22\0\100\25"+
    "\2\0\66\25\50\0\12\25\6\0\20\63\20\0\20\63"+
    "\3\0\2\63\30\0\3\63\41\0\1\25\1\0\1\25"+
    "\3\0\1\25\1\0\1\25\1\0\1\25\1\0\1\25"+
    "\1\0\176\25\23\0\12\63\7\0\32\25\4\0\1\63"+
    "\1\0\32\25\13\0\70\25\2\63\37\25\3\0\6\25"+
    "\2\0\6\25\2\0\6\25\2\0\3\25\43\0\14\25"+
    "\1\0\32\25\1\0\23\25\1\0\2\25\1\0\17\25"+
    "\2\0\16\25\42\0\173\25\105\0\65\25\210\0\1\63"+
    "\202\0\35\25\3\0\61\25\17\0\1\63\37\0\40\25"+
    "\15\0\36\25\5\0\46\25\5\63\5\0\36\25\2\0"+
    "\44\25\4\0\10\25\1\0\5\25\52\0\236\25\2\0"+
    "\12\63\6\0\44\25\4\0\44\25\4\0\50\25\10\0"+
    "\64\25\234\0\67\25\11\0\26\25\12\0\10\25\230\0"+
    "\6\25\2\0\1\25\1\0\54\25\1\0\2\25\3\0"+
    "\1\25\2\0\27\25\12\0\27\25\11\0\37\25\101\0"+
    "\23\25\1\0\2\25\12\0\26\25\12\0\32\25\106\0"+
    "\70\25\6\0\2\25\100\0\1\25\3\63\1\0\2\63"+
    "\5\0\4\63\4\25\1\0\3\25\1\0\35\25\2\0"+
    "\3\63\4\0\1\63\40\0\35\25\3\0\35\25\43\0"+
    "\10\25\1\0\34\25\2\63\31\0\66\25\12\0\26\25"+
    "\12\0\23\25\15\0\22\25\156\0\111\25\67\0\63\25"+
    "\15\0\63\25\15\0\44\25\4\63\10\0\12\63\306\0"+
    "\35\25\12\0\1\25\10\0\26\25\13\63\217\0\27\25"+
    "\11\0\3\63\65\25\17\63\37\0\12\63\17\0\4\63"+
    "\55\25\13\63\25\0\31\25\7\0\12\63\6\0\3\63"+
    "\44\25\16\63\1\0\12\63\4\0\1\25\2\63\11\0"+
    "\43\25\1\63\2\0\1\25\11\0\3\63\60\25\16\63"+
    "\4\25\4\0\4\63\3\0\12\63\1\25\1\0\1\25"+
    "\43\0\22\25\1\0\31\25\14\63\6\0\1\63\101\0"+
    "\7\25\1\0\1\25\1\0\4\25\1\0\17\25\1\0"+
    "\12\25\7\0\57\25\14\63\5\0\12\63\6\0\4\63"+
    "\1\0\10\25\2\0\2\25\2\0\26\25\1\0\7\25"+
    "\1\0\2\25\1\0\5\25\1\0\2\63\1\25\7\63"+
    "\2\0\2\63\2\0\3\63\2\0\1\25\6\0\1\63"+
    "\5\0\5\25\2\63\2\0\7\63\3\0\5\63\213\0"+
    "\65\25\22\63\4\25\5\0\12\63\4\0\1\63\1\25"+
    "\40\0\60\25\24\63\2\25\1\0\1\25\10\0\12\63"+
    "\246\0\57\25\7\63\2\0\11\63\27\0\4\25\2\63"+
    "\42\0\60\25\21\63\3\0\1\25\13\0\12\63\46\0"+
    "\53\25\15\63\1\25\7\0\12\63\66\0\33\25\2\0"+
    "\17\63\4\0\12\63\306\0\54\25\17\63\145\0\100\25"+
    "\12\63\25\0\1\25\240\0\10\25\2\0\47\25\7\63"+
    "\2\0\7\63\1\25\1\0\1\25\1\63\33\0\1\25"+
    "\12\63\50\25\7\63\1\25\4\63\10\0\1\63\10\0"+
    "\1\25\13\63\56\25\20\63\3\0\1\25\42\0\71\25"+
    "\7\0\11\25\1\0\45\25\10\63\1\0\10\63\1\25"+
    "\17\0\12\63\30\0\36\25\2\0\26\63\1\0\16\63"+
    "\111\0\7\25\1\0\2\25\1\0\46\25\6\63\3\0"+
    "\1\63\1\0\2\63\1\0\7\63\1\25\1\63\10\0"+
    "\12\63\6\0\6\25\1\0\2\25\1\0\40\25\5\63"+
    "\1\0\2\63\1\0\5\63\1\25\7\0\12\63\u0136\0"+
    "\23\25\4\63\11\0\232\25\146\0\157\25\21\0\304\25"+
    "\274\0\57\25\321\0\107\25\271\0\71\25\7\0\37\25"+
    "\1\0\12\63\146\0\36\25\2\0\5\63\13\0\60\25"+
    "\7\63\11\0\4\25\14\0\12\63\11\0\25\25\5\0"+
    "\23\25\260\0\100\25\200\0\113\25\4\0\1\63\1\25"+
    "\67\63\7\0\4\63\15\25\100\0\2\25\1\0\1\25"+
    "\34\0\370\25\10\0\363\25\15\0\37\25\61\0\3\25"+
    "\21\0\4\25\10\0\u018c\25\4\0\153\25\5\0\15\25"+
    "\3\0\11\25\7\0\12\25\3\0\2\63\306\0\5\63"+
    "\3\0\6\63\10\0\10\63\2\0\7\63\36\0\4\63"+
    "\224\0\3\63\273\0\125\25\1\0\107\25\1\0\2\25"+
    "\2\0\1\25\2\0\2\25\2\0\4\25\1\0\14\25"+
    "\1\0\1\25\1\0\7\25\1\0\101\25\1\0\4\25"+
    "\2\0\10\25\1\0\7\25\1\0\34\25\1\0\4\25"+
    "\1\0\5\25\1\0\1\25\3\0\7\25\1\0\u0154\25"+
    "\2\0\31\25\1\0\31\25\1\0\37\25\1\0\31\25"+
    "\1\0\37\25\1\0\31\25\1\0\37\25\1\0\31\25"+
    "\1\0\37\25\1\0\31\25\1\0\10\25\2\0\151\63"+
    "\4\0\62\63\10\0\1\63\16\0\1\63\26\0\5\63"+
    "\1\0\17\63\120\0\7\63\1\0\21\63\2\0\7\63"+
    "\1\0\2\63\1\0\5\63\325\0\55\25\3\0\7\63"+
    "\7\25\2\0\12\63\4\0\1\25\u0171\0\54\25\16\63"+
    "\6\0\305\25\13\0\7\63\51\0\104\25\7\63\1\25"+
    "\4\0\12\63\246\0\4\25\1\0\33\25\1\0\2\25"+
    "\1\0\1\25\2\0\1\25\1\0\12\25\1\0\4\25"+
    "\1\0\1\25\1\0\1\25\6\0\1\25\4\0\1\25"+
    "\1\0\1\25\1\0\1\25\1\0\3\25\1\0\2\25"+
    "\1\0\1\25\2\0\1\25\1\0\1\25\1\0\1\25"+
    "\1\0\1\25\1\0\1\25\1\0\2\25\1\0\1\25"+
    "\2\0\4\25\1\0\7\25\1\0\4\25\1\0\4\25"+
    "\1\0\1\25\1\0\12\25\1\0\21\25\5\0\3\25"+
    "\1\0\5\25\1\0\21\25\104\0\327\25\51\0\65\25"+
    "\13\0\336\25\2\0\u0182\25\16\0\u0131\25\37\0\36\25"+
    "\342\0\360\63\20\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\2\1\4\1\3\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\3\1\22\1\23\1\24"+
    "\1\3\1\25\1\26\1\23\1\3\11\23\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\0\1\36\1\0"+
    "\1\37\1\40\1\0\1\41\1\42\5\23\1\43\1\23"+
    "\1\44\4\23\1\34\1\0\2\23\1\45\1\23\1\46"+
    "\7\23\1\47\1\50\1\51\5\23\1\52\1\23\1\53"+
    "\5\23\1\54\1\23\1\55\2\23\1\56\1\57\1\23"+
    "\1\60\3\23\1\61\1\23\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u010e"+
    "\0\u017a\0\u010e\0\u010e\0\u010e\0\u010e\0\u01b0\0\u010e\0\u01e6"+
    "\0\u021c\0\u0252\0\u010e\0\u010e\0\u0288\0\u010e\0\u0288\0\u010e"+
    "\0\u02be\0\u010e\0\u02f4\0\u010e\0\u010e\0\u032a\0\u0360\0\u0396"+
    "\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546"+
    "\0\u010e\0\u010e\0\u010e\0\u0288\0\u010e\0\u057c\0\u010e\0\u017a"+
    "\0\u010e\0\u05b2\0\u05e8\0\u010e\0\u0360\0\u010e\0\u02be\0\u061e"+
    "\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u02be\0\u072c\0\u0762\0\u0798"+
    "\0\u07ce\0\u0804\0\u083a\0\u010e\0\u0870\0\u08a6\0\u08dc\0\u02be"+
    "\0\u0912\0\u02be\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56"+
    "\0\u0a8c\0\u010e\0\u02be\0\u02be\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64"+
    "\0\u0b9a\0\u02be\0\u0bd0\0\u02be\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8"+
    "\0\u0cde\0\u02be\0\u0d14\0\u02be\0\u0d4a\0\u0d80\0\u02be\0\u02be"+
    "\0\u0db6\0\u02be\0\u0dec\0\u0e22\0\u0e58\0\u02be\0\u0e8e\0\u02be";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\4\14\3\1\5\45\3\1\6\3\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\31\1\42\1\43\1\31\1\44\2\31\1\45"+
    "\4\31\1\46\1\47\1\31\1\50\1\31\1\51\1\52"+
    "\1\53\1\54\1\6\1\55\1\6\20\3\1\0\46\3"+
    "\3\4\14\3\1\0\45\3\5\0\1\56\147\0\3\7"+
    "\104\0\1\57\50\0\1\60\14\0\1\61\53\0\1\62"+
    "\3\0\1\63\66\0\1\21\66\0\1\55\54\0\1\60"+
    "\75\0\1\31\7\0\1\31\4\0\1\31\1\0\23\31"+
    "\4\0\1\31\2\0\2\64\2\0\61\64\6\0\1\60"+
    "\7\0\1\31\7\0\1\31\4\0\1\31\1\0\23\31"+
    "\4\0\1\31\2\0\33\65\1\66\32\65\15\0\1\31"+
    "\7\0\1\31\4\0\1\31\1\0\16\31\1\67\4\31"+
    "\4\0\1\31\17\0\1\31\7\0\1\31\4\0\1\31"+
    "\1\0\1\70\22\31\4\0\1\31\17\0\1\31\7\0"+
    "\1\31\4\0\1\31\1\0\10\31\1\71\1\31\1\72"+
    "\7\31\1\73\4\0\1\31\17\0\1\31\7\0\1\31"+
    "\4\0\1\31\1\0\13\31\1\74\7\31\4\0\1\31"+
    "\17\0\1\31\7\0\1\31\4\0\1\31\1\0\4\31"+
    "\1\75\4\31\1\76\1\77\10\31\4\0\1\31\17\0"+
    "\1\31\7\0\1\31\4\0\1\31\1\0\1\100\22\31"+
    "\4\0\1\31\17\0\1\31\7\0\1\31\4\0\1\31"+
    "\1\0\10\31\1\101\12\31\4\0\1\31\17\0\1\31"+
    "\7\0\1\31\4\0\1\31\1\0\3\31\1\102\17\31"+
    "\4\0\1\31\17\0\1\31\7\0\1\31\4\0\1\31"+
    "\1\0\5\31\1\103\15\31\4\0\1\31\14\0\1\104"+
    "\6\0\1\104\1\0\1\104\6\0\1\104\27\0\1\104"+
    "\3\0\10\62\1\105\55\62\2\63\1\0\63\63\15\0"+
    "\1\31\7\0\1\31\4\0\1\31\1\0\16\31\1\106"+
    "\4\31\4\0\1\31\17\0\1\31\7\0\1\31\4\0"+
    "\1\31\1\0\16\31\1\107\4\31\4\0\1\31\17\0"+
    "\1\31\7\0\1\31\4\0\1\31\1\0\2\31\1\110"+
    "\20\31\4\0\1\31\17\0\1\31\7\0\1\31\4\0"+
    "\1\31\1\0\17\31\1\111\3\31\4\0\1\31\17\0"+
    "\1\31\7\0\1\31\4\0\1\31\1\0\15\31\1\112"+
    "\5\31\4\0\1\31\17\0\1\31\7\0\1\31\4\0"+
    "\1\31\1\0\14\31\1\113\6\31\4\0\1\31\17\0"+
    "\1\31\7\0\1\31\4\0\1\31\1\0\20\31\1\114"+
    "\2\31\4\0\1\31\17\0\1\31\7\0\1\31\4\0"+
    "\1\31\1\0\17\31\1\115\3\31\4\0\1\31\17\0"+
    "\1\31\7\0\1\31\4\0\1\31\1\0\13\31\1\116"+
    "\7\31\4\0\1\31\17\0\1\31\7\0\1\31\4\0"+
    "\1\31\1\0\11\31\1\117\11\31\4\0\1\31\17\0"+
    "\1\31\7\0\1\31\4\0\1\31\1\0\3\31\1\120"+
    "\2\31\1\121\14\31\4\0\1\31\2\0\10\62\1\105"+
    "\3\62\1\122\51\62\15\0\1\31\7\0\1\31\4\0"+
    "\1\31\1\0\3\31\1\123\17\31\4\0\1\31\17\0"+
    "\1\31\7\0\1\31\4\0\1\31\1\0\3\31\1\124"+
    "\17\31\4\0\1\31\17\0\1\31\7\0\1\31\4\0"+
    "\1\31\1\0\3\31\1\125\17\31\4\0\1\31\17\0"+
    "\1\31\7\0\1\31\4\0\1\31\1\0\10\31\1\126"+
    "\2\31\1\127\7\31\4\0\1\31\17\0\1\31\7\0"+
    "\1\31\4\0\1\31\1\0\13\31\1\130\7\31\4\0"+
    "\1\31\17\0\1\31\7\0\1\31\4\0\1\31\1\0"+
    "\1\31\1\131\21\31\4\0\1\31\17\0\1\31\7\0"+
    "\1\31\4\0\1\31\1\0\17\31\1\132\3\31\4\0"+
    "\1\31\17\0\1\31\7\0\1\31\4\0\1\31\1\0"+
    "\14\31\1\133\6\31\4\0\1\31\17\0\1\31\7\0"+
    "\1\31\4\0\1\31\1\0\12\31\1\134\10\31\4\0"+
    "\1\31\17\0\1\31\7\0\1\31\4\0\1\31\1\0"+
    "\10\31\1\135\12\31\4\0\1\31\17\0\1\31\7\0"+
    "\1\31\4\0\1\31\1\0\12\31\1\136\10\31\4\0"+
    "\1\31\17\0\1\31\7\0\1\31\4\0\1\31\1\0"+
    "\3\31\1\137\17\31\4\0\1\31\17\0\1\31\7\0"+
    "\1\31\4\0\1\31\1\0\15\31\1\140\5\31\4\0"+
    "\1\31\17\0\1\31\7\0\1\31\4\0\1\31\1\0"+
    "\7\31\1\141\13\31\4\0\1\31\17\0\1\31\7\0"+
    "\1\31\4\0\1\31\1\0\5\31\1\142\15\31\4\0"+
    "\1\31\17\0\1\31\7\0\1\31\4\0\1\31\1\0"+
    "\10\31\1\143\12\31\4\0\1\31\17\0\1\31\7\0"+
    "\1\31\4\0\1\31\1\0\3\31\1\144\17\31\4\0"+
    "\1\31\17\0\1\31\7\0\1\31\4\0\1\31\1\0"+
    "\2\31\1\145\20\31\4\0\1\31\17\0\1\31\7\0"+
    "\1\31\4\0\1\31\1\0\11\31\1\146\11\31\4\0"+
    "\1\31\17\0\1\31\7\0\1\31\4\0\1\31\1\0"+
    "\17\31\1\147\3\31\4\0\1\31\17\0\1\31\7\0"+
    "\1\31\4\0\1\31\1\0\3\31\1\150\17\31\4\0"+
    "\1\31\17\0\1\31\7\0\1\31\4\0\1\31\1\0"+
    "\1\151\22\31\4\0\1\31\17\0\1\31\7\0\1\31"+
    "\4\0\1\31\1\0\16\31\1\152\4\31\4\0\1\31"+
    "\17\0\1\31\7\0\1\31\4\0\1\31\1\0\3\31"+
    "\1\153\17\31\4\0\1\31\17\0\1\31\7\0\1\31"+
    "\4\0\1\31\1\0\17\31\1\154\3\31\4\0\1\31"+
    "\17\0\1\31\7\0\1\31\4\0\1\31\1\0\12\31"+
    "\1\155\10\31\4\0\1\31\17\0\1\31\7\0\1\31"+
    "\4\0\1\31\1\0\3\31\1\156\17\31\4\0\1\31"+
    "\17\0\1\31\7\0\1\31\4\0\1\31\1\0\17\31"+
    "\1\157\3\31\4\0\1\31\17\0\1\31\7\0\1\31"+
    "\4\0\1\31\1\0\16\31\1\160\4\31\4\0\1\31"+
    "\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3780];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\3\1\1\11\1\1\1\11\1\1\4\11\1\1"+
    "\1\11\3\1\2\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\2\11\13\1\3\11\1\1\1\11\1\1"+
    "\1\11\1\0\1\11\1\0\1\1\1\11\1\0\1\11"+
    "\15\1\1\11\1\0\14\1\1\11\36\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _DejavuLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public com.intellij.psi.tree.IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return NORMAL_TEXT;
            }
          // fall through
          case 51: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 52: break;
          case 3:
            { return BAD_CHARACTER;
            }
          // fall through
          case 53: break;
          case 4:
            { return DOLLAR;
            }
          // fall through
          case 54: break;
          case 5:
            { return PARENTHESIS_L;
            }
          // fall through
          case 55: break;
          case 6:
            { return PARENTHESIS_R;
            }
          // fall through
          case 56: break;
          case 7:
            { return OP_MANY;
            }
          // fall through
          case 57: break;
          case 8:
            { return COMMA;
            }
          // fall through
          case 58: break;
          case 9:
            { return HYPHEN;
            }
          // fall through
          case 59: break;
          case 10:
            { return DOT;
            }
          // fall through
          case 60: break;
          case 11:
            { return SLASH;
            }
          // fall through
          case 61: break;
          case 12:
            { return INTEGER;
            }
          // fall through
          case 62: break;
          case 13:
            { return COLON;
            }
          // fall through
          case 63: break;
          case 14:
            { return SEMICOLON;
            }
          // fall through
          case 64: break;
          case 15:
            { return ANGLE_L;
            }
          // fall through
          case 65: break;
          case 16:
            { return EQ;
            }
          // fall through
          case 66: break;
          case 17:
            { return ANGLE_R;
            }
          // fall through
          case 67: break;
          case 18:
            { return AT;
            }
          // fall through
          case 68: break;
          case 19:
            { return SYMBOL;
            }
          // fall through
          case 69: break;
          case 20:
            { return BRACKET_L;
            }
          // fall through
          case 70: break;
          case 21:
            { return BRACKET_R;
            }
          // fall through
          case 71: break;
          case 22:
            { return OP_REMARK;
            }
          // fall through
          case 72: break;
          case 23:
            { return BRACE_L;
            }
          // fall through
          case 73: break;
          case 24:
            { return OP_OR;
            }
          // fall through
          case 74: break;
          case 25:
            { return BRACE_R;
            }
          // fall through
          case 75: break;
          case 26:
            { return OP_CONCAT;
            }
          // fall through
          case 76: break;
          case 27:
            { return PROPORTION;
            }
          // fall through
          case 77: break;
          case 28:
            { yybegin(ProgramContext);
          return TEMPLATE_L;
            }
          // fall through
          case 78: break;
          case 29:
            { yybegin(YYINITIAL);
		  return TEMPLATE_R;
            }
          // fall through
          case 79: break;
          case 30:
            { return TO;
            }
          // fall through
          case 80: break;
          case 31:
            { return COMMENT_LINE;
            }
          // fall through
          case 81: break;
          case 32:
            { return ESCAPED;
            }
          // fall through
          case 82: break;
          case 33:
            { return SYMBOW_RAW;
            }
          // fall through
          case 83: break;
          case 34:
            { return KW_AS;
            }
          // fall through
          case 84: break;
          case 35:
            { return KW_IF;
            }
          // fall through
          case 85: break;
          case 36:
            { return KW_IN;
            }
          // fall through
          case 86: break;
          case 37:
            { return KW_END;
            }
          // fall through
          case 87: break;
          case 38:
            { return KW_FOR;
            }
          // fall through
          case 88: break;
          case 39:
            { return COMMENT_BLOCK;
            }
          // fall through
          case 89: break;
          case 40:
            { return KW_CASE;
            }
          // fall through
          case 90: break;
          case 41:
            { return KW_ELSE;
            }
          // fall through
          case 91: break;
          case 42:
            { return KW_SLOT;
            }
          // fall through
          case 92: break;
          case 43:
            { return KW_WHEN;
            }
          // fall through
          case 93: break;
          case 44:
            { return KW_MATCH;
            }
          // fall through
          case 94: break;
          case 45:
            { return KW_WHILE;
            }
          // fall through
          case 95: break;
          case 46:
            { return KW_IMPORT;
            }
          // fall through
          case 96: break;
          case 47:
            { return KW_INVOKE;
            }
          // fall through
          case 97: break;
          case 48:
            { return KW_EXTENDS;
            }
          // fall through
          case 98: break;
          case 49:
            { return KW_TEMPLATE;
            }
          // fall through
          case 99: break;
          case 50:
            { return KW_IMPLEMENTS;
            }
          // fall through
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
