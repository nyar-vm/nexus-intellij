// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: dejavu.flex

package dejavu.psi;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static dejavu.psi.DejavuTypes.*;


public class _DejavuLexer implements com.intellij.lexer.FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ProgramContext = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\1\u1f00\11\u2000\1\u2100\1\u2200\2\u2000\1\u2300"+
    "\1\u2400\2\u2000\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u2000\1\u0100\1\u3000\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00\1\u3b00"+
    "\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u2000\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u2000\1\u4f00\1\u5000"+
    "\1\u5100\1\u2000\3\u0100\1\u5200\1\u5300\1\u5400\12\u2000\4\u0100"+
    "\1\u5500\17\u2000\2\u0100\1\u5600\41\u2000\2\u0100\1\u5700\1\u5800"+
    "\2\u2000\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100\1\u5c00\45\u2000"+
    "\1\u0100\1\u5d00\1\u5e00\11\u2000\1\u5f00\24\u2000\1\u6000\1\u6100"+
    "\1\u2000\1\u6200\1\u6300\1\u6400\1\u6500\2\u2000\1\u6600\5\u2000"+
    "\1\u6700\1\u6800\1\u6900\5\u2000\1\u6a00\1\u6b00\4\u2000\1\u6c00"+
    "\21\u2000\246\u0100\1\u6d00\20\u0100\1\u6e00\1\u6f00\25\u0100\1\u7000"+
    "\34\u0100\1\u7100\14\u2000\2\u0100\1\u7200\u0b06\u2000\1\u7300\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\0\1\6\1\7\1\0\1\10\1\11\1\12"+
    "\1\13\1\0\1\14\1\15\1\16\1\17\12\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\32\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\30\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\30\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\30\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\2\30\1\64\1\65"+
    "\1\66\1\67\6\0\1\3\32\0\1\1\11\0\1\30"+
    "\12\0\1\30\1\0\1\70\2\0\1\30\5\0\27\30"+
    "\1\0\37\30\1\0\u01ca\30\4\0\14\30\16\0\5\30"+
    "\7\0\1\30\1\0\1\30\21\0\160\70\5\30\1\0"+
    "\2\30\3\0\3\30\1\0\1\30\6\0\1\30\1\70"+
    "\3\30\1\0\1\30\1\0\24\30\1\0\123\30\1\0"+
    "\213\30\1\0\5\70\2\0\246\30\1\0\46\30\2\0"+
    "\1\30\6\0\51\30\10\0\55\70\1\0\1\70\1\0"+
    "\2\70\1\0\2\70\1\0\1\70\10\0\33\30\4\0"+
    "\4\30\35\0\13\70\5\0\53\30\37\70\4\0\2\30"+
    "\1\70\143\30\1\0\1\30\7\70\2\0\6\70\2\30"+
    "\2\70\1\0\4\70\2\30\12\70\3\30\2\0\1\30"+
    "\20\0\1\30\1\70\36\30\33\70\2\0\131\30\13\70"+
    "\1\30\16\0\12\70\41\30\11\70\2\30\4\0\1\30"+
    "\2\0\1\70\2\0\26\30\4\70\1\30\11\70\1\30"+
    "\3\70\1\30\5\70\22\0\31\30\3\70\4\0\13\30"+
    "\65\0\25\30\1\0\10\30\25\0\17\70\1\0\41\70"+
    "\66\30\3\70\1\30\22\70\1\30\7\70\12\30\2\70"+
    "\2\0\12\70\1\0\20\30\3\70\1\0\10\30\2\0"+
    "\2\30\2\0\26\30\1\0\7\30\1\0\1\30\3\0"+
    "\4\30\2\0\1\70\1\30\7\70\2\0\2\70\2\0"+
    "\3\70\1\30\10\0\1\70\4\0\2\30\1\0\3\30"+
    "\2\70\2\0\12\70\2\30\12\0\1\30\1\0\1\70"+
    "\2\0\3\70\1\0\6\30\4\0\2\30\2\0\26\30"+
    "\1\0\7\30\1\0\2\30\1\0\2\30\1\0\2\30"+
    "\2\0\1\70\1\0\5\70\4\0\2\70\2\0\3\70"+
    "\3\0\1\70\7\0\4\30\1\0\1\30\7\0\14\70"+
    "\3\30\1\70\13\0\3\70\1\0\11\30\1\0\3\30"+
    "\1\0\26\30\1\0\7\30\1\0\2\30\1\0\5\30"+
    "\2\0\1\70\1\30\10\70\1\0\3\70\1\0\3\70"+
    "\2\0\1\30\17\0\2\30\2\70\2\0\12\70\11\0"+
    "\1\30\6\70\1\0\3\70\1\0\10\30\2\0\2\30"+
    "\2\0\26\30\1\0\7\30\1\0\2\30\1\0\5\30"+
    "\2\0\1\70\1\30\7\70\2\0\2\70\2\0\3\70"+
    "\10\0\2\70\4\0\2\30\1\0\3\30\2\70\2\0"+
    "\12\70\1\0\1\30\20\0\1\70\1\30\1\0\6\30"+
    "\3\0\3\30\1\0\4\30\3\0\2\30\1\0\1\30"+
    "\1\0\2\30\3\0\2\30\3\0\3\30\3\0\14\30"+
    "\4\0\5\70\3\0\3\70\1\0\4\70\2\0\1\30"+
    "\6\0\1\70\16\0\12\70\20\0\5\70\10\30\1\0"+
    "\3\30\1\0\27\30\1\0\20\30\3\0\1\30\7\70"+
    "\1\0\3\70\1\0\4\70\7\0\2\70\1\0\3\30"+
    "\5\0\2\30\2\70\2\0\12\70\20\0\1\30\3\70"+
    "\1\0\10\30\1\0\3\30\1\0\27\30\1\0\12\30"+
    "\1\0\5\30\2\0\1\70\1\30\7\70\1\0\3\70"+
    "\1\0\4\70\7\0\2\70\7\0\1\30\1\0\2\30"+
    "\2\70\2\0\12\70\1\0\2\30\15\0\4\70\1\0"+
    "\10\30\1\0\3\30\1\0\51\30\2\70\1\30\7\70"+
    "\1\0\3\70\1\0\4\70\1\30\5\0\3\30\1\70"+
    "\7\0\3\30\2\70\2\0\12\70\12\0\6\30\2\0"+
    "\2\70\1\0\22\30\3\0\30\30\1\0\11\30\1\0"+
    "\1\30\2\0\7\30\3\0\1\70\4\0\6\70\1\0"+
    "\1\70\1\0\10\70\6\0\12\70\2\0\2\70\15\0"+
    "\60\30\1\70\1\30\10\70\5\0\7\30\10\70\1\0"+
    "\12\70\47\0\2\30\1\0\1\30\1\0\5\30\1\0"+
    "\30\30\1\0\1\30\1\0\12\30\1\70\1\30\12\70"+
    "\1\30\2\0\5\30\1\0\1\30\1\0\6\70\2\0"+
    "\12\70\2\0\4\30\40\0\1\30\27\0\2\70\6\0"+
    "\12\70\13\0\1\70\1\0\1\70\1\0\1\70\4\0"+
    "\2\70\10\30\1\0\44\30\4\0\24\70\1\0\2\70"+
    "\5\30\13\70\1\0\44\70\11\0\1\70\71\0\53\30"+
    "\24\70\1\30\12\70\6\0\6\30\4\70\4\30\3\70"+
    "\1\30\3\70\2\30\7\70\3\30\4\70\15\30\14\70"+
    "\1\30\17\70\2\0\46\30\1\0\1\30\5\0\1\30"+
    "\2\0\53\30\1\0\115\30\1\0\4\30\2\0\7\30"+
    "\1\0\1\30\1\0\4\30\2\0\51\30\1\0\4\30"+
    "\2\0\41\30\1\0\4\30\2\0\7\30\1\0\1\30"+
    "\1\0\4\30\2\0\17\30\1\0\71\30\1\0\4\30"+
    "\2\0\103\30\2\0\3\70\11\0\11\70\16\0\20\30"+
    "\20\0\126\30\2\0\6\30\3\0\u016c\30\2\0\21\30"+
    "\1\1\32\30\5\0\113\30\3\0\13\30\7\0\15\30"+
    "\1\0\4\30\3\70\13\0\22\30\3\70\13\0\22\30"+
    "\2\70\14\0\15\30\1\0\3\30\1\0\2\70\14\0"+
    "\64\30\40\70\3\0\1\30\4\0\1\30\1\70\2\0"+
    "\12\70\41\0\3\70\2\0\12\70\6\0\131\30\7\0"+
    "\51\30\1\70\1\30\5\0\106\30\12\0\37\30\1\0"+
    "\14\70\4\0\14\70\12\0\12\70\36\30\2\0\5\30"+
    "\13\0\54\30\4\0\32\30\6\0\13\70\45\0\27\30"+
    "\5\70\4\0\65\30\12\70\1\0\35\70\2\0\13\70"+
    "\6\0\12\70\15\0\1\30\10\0\16\70\102\0\5\70"+
    "\57\30\21\70\7\30\4\0\12\70\21\0\11\70\14\0"+
    "\3\70\36\30\15\70\2\30\12\70\54\30\16\70\14\0"+
    "\44\30\24\70\10\0\12\70\3\0\3\30\12\70\44\30"+
    "\2\0\11\30\7\0\53\30\2\0\3\30\20\0\3\70"+
    "\1\0\25\70\4\30\1\70\6\30\1\70\2\30\3\70"+
    "\1\30\5\0\300\30\72\70\1\0\5\70\26\30\2\0"+
    "\6\30\2\0\46\30\2\0\6\30\2\0\10\30\1\0"+
    "\1\30\1\0\1\30\1\0\1\30\1\0\37\30\2\0"+
    "\65\30\1\0\7\30\1\0\1\30\3\0\3\30\1\0"+
    "\7\30\3\0\4\30\2\0\6\30\4\0\15\30\5\0"+
    "\3\30\1\0\7\30\3\0\13\1\35\0\2\3\5\0"+
    "\1\1\17\0\2\70\23\0\1\70\12\0\1\1\21\0"+
    "\1\30\15\0\1\30\20\0\15\30\63\0\15\70\4\0"+
    "\1\70\3\0\14\70\21\0\1\30\4\0\1\30\2\0"+
    "\12\30\1\0\1\30\2\0\6\30\6\0\1\30\1\0"+
    "\1\30\1\0\1\30\1\0\20\30\2\0\4\30\5\0"+
    "\5\30\4\0\1\30\21\0\51\30\256\0\1\71\u01c8\0"+
    "\57\30\1\0\57\30\1\0\205\30\6\0\4\30\3\70"+
    "\2\30\14\0\46\30\1\0\1\30\5\0\1\30\2\0"+
    "\70\30\7\0\1\30\17\0\1\70\27\30\11\0\7\30"+
    "\1\0\7\30\1\0\7\30\1\0\7\30\1\0\7\30"+
    "\1\0\7\30\1\0\7\30\1\0\7\30\1\0\40\70"+
    "\1\1\4\0\3\30\31\0\11\30\6\70\1\0\5\30"+
    "\2\0\5\30\4\0\126\30\2\0\2\70\2\0\3\30"+
    "\1\0\132\30\1\0\4\30\5\0\53\30\1\0\136\30"+
    "\21\0\33\30\65\0\306\30\112\0\360\30\20\0\215\30"+
    "\103\0\56\30\2\0\15\30\3\0\20\30\12\70\2\30"+
    "\24\0\57\30\1\70\4\0\12\70\1\0\37\30\2\70"+
    "\120\30\2\70\45\0\11\30\2\0\147\30\2\0\65\30"+
    "\2\0\5\30\60\0\13\30\1\70\3\30\1\70\4\30"+
    "\1\70\27\30\5\70\30\0\64\30\14\0\2\70\62\30"+
    "\22\70\12\0\12\70\6\0\22\70\6\30\3\0\1\30"+
    "\1\0\2\30\13\70\34\30\10\70\2\0\27\30\15\70"+
    "\14\0\35\30\3\0\4\70\57\30\16\70\16\0\1\30"+
    "\12\70\6\0\5\30\1\70\12\30\12\70\5\30\1\0"+
    "\51\30\16\70\11\0\3\30\1\70\10\30\2\70\2\0"+
    "\12\70\6\0\27\30\3\0\1\30\3\70\62\30\1\70"+
    "\1\30\3\70\2\30\2\70\5\30\2\70\1\30\1\70"+
    "\1\30\30\0\3\30\2\0\13\30\5\70\2\0\3\30"+
    "\2\70\12\0\6\30\2\0\6\30\2\0\6\30\11\0"+
    "\7\30\1\0\7\30\1\0\53\30\1\0\14\30\10\0"+
    "\163\30\10\70\1\0\2\70\2\0\12\70\6\0\244\30"+
    "\14\0\27\30\4\0\61\30\4\0\u0100\72\156\30\2\0"+
    "\152\30\46\0\7\30\14\0\5\30\5\0\1\30\1\70"+
    "\12\30\1\0\15\30\1\0\5\30\1\0\1\30\1\0"+
    "\2\30\1\0\2\30\1\0\154\30\41\0\213\30\6\0"+
    "\332\30\22\0\100\30\2\0\66\30\50\0\12\30\6\0"+
    "\20\70\20\0\20\70\3\0\2\70\30\0\3\70\41\0"+
    "\1\30\1\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\1\30\1\0\1\30\1\0\176\30\23\0\12\70\7\0"+
    "\32\30\4\0\1\70\1\0\32\30\13\0\70\30\2\70"+
    "\37\30\3\0\6\30\2\0\6\30\2\0\6\30\2\0"+
    "\3\30\43\0\14\30\1\0\32\30\1\0\23\30\1\0"+
    "\2\30\1\0\17\30\2\0\16\30\42\0\173\30\105\0"+
    "\65\30\210\0\1\70\202\0\35\30\3\0\61\30\17\0"+
    "\1\70\37\0\40\30\15\0\36\30\5\0\46\30\5\70"+
    "\5\0\36\30\2\0\44\30\4\0\10\30\1\0\5\30"+
    "\52\0\236\30\2\0\12\70\6\0\44\30\4\0\44\30"+
    "\4\0\50\30\10\0\64\30\234\0\67\30\11\0\26\30"+
    "\12\0\10\30\230\0\6\30\2\0\1\30\1\0\54\30"+
    "\1\0\2\30\3\0\1\30\2\0\27\30\12\0\27\30"+
    "\11\0\37\30\101\0\23\30\1\0\2\30\12\0\26\30"+
    "\12\0\32\30\106\0\70\30\6\0\2\30\100\0\1\30"+
    "\3\70\1\0\2\70\5\0\4\70\4\30\1\0\3\30"+
    "\1\0\35\30\2\0\3\70\4\0\1\70\40\0\35\30"+
    "\3\0\35\30\43\0\10\30\1\0\34\30\2\70\31\0"+
    "\66\30\12\0\26\30\12\0\23\30\15\0\22\30\156\0"+
    "\111\30\67\0\63\30\15\0\63\30\15\0\44\30\4\70"+
    "\10\0\12\70\306\0\35\30\12\0\1\30\10\0\26\30"+
    "\13\70\217\0\27\30\11\0\3\70\65\30\17\70\37\0"+
    "\12\70\17\0\4\70\55\30\13\70\25\0\31\30\7\0"+
    "\12\70\6\0\3\70\44\30\16\70\1\0\12\70\4\0"+
    "\1\30\2\70\11\0\43\30\1\70\2\0\1\30\11\0"+
    "\3\70\60\30\16\70\4\30\4\0\4\70\3\0\12\70"+
    "\1\30\1\0\1\30\43\0\22\30\1\0\31\30\14\70"+
    "\6\0\1\70\101\0\7\30\1\0\1\30\1\0\4\30"+
    "\1\0\17\30\1\0\12\30\7\0\57\30\14\70\5\0"+
    "\12\70\6\0\4\70\1\0\10\30\2\0\2\30\2\0"+
    "\26\30\1\0\7\30\1\0\2\30\1\0\5\30\1\0"+
    "\2\70\1\30\7\70\2\0\2\70\2\0\3\70\2\0"+
    "\1\30\6\0\1\70\5\0\5\30\2\70\2\0\7\70"+
    "\3\0\5\70\213\0\65\30\22\70\4\30\5\0\12\70"+
    "\4\0\1\70\1\30\40\0\60\30\24\70\2\30\1\0"+
    "\1\30\10\0\12\70\246\0\57\30\7\70\2\0\11\70"+
    "\27\0\4\30\2\70\42\0\60\30\21\70\3\0\1\30"+
    "\13\0\12\70\46\0\53\30\15\70\1\30\7\0\12\70"+
    "\66\0\33\30\2\0\17\70\4\0\12\70\306\0\54\30"+
    "\17\70\145\0\100\30\12\70\25\0\1\30\240\0\10\30"+
    "\2\0\47\30\7\70\2\0\7\70\1\30\1\0\1\30"+
    "\1\70\33\0\1\30\12\70\50\30\7\70\1\30\4\70"+
    "\10\0\1\70\10\0\1\30\13\70\56\30\20\70\3\0"+
    "\1\30\42\0\71\30\7\0\11\30\1\0\45\30\10\70"+
    "\1\0\10\70\1\30\17\0\12\70\30\0\36\30\2\0"+
    "\26\70\1\0\16\70\111\0\7\30\1\0\2\30\1\0"+
    "\46\30\6\70\3\0\1\70\1\0\2\70\1\0\7\70"+
    "\1\30\1\70\10\0\12\70\6\0\6\30\1\0\2\30"+
    "\1\0\40\30\5\70\1\0\2\70\1\0\5\70\1\30"+
    "\7\0\12\70\u0136\0\23\30\4\70\11\0\232\30\146\0"+
    "\157\30\21\0\304\30\274\0\57\30\321\0\107\30\271\0"+
    "\71\30\7\0\37\30\1\0\12\70\146\0\36\30\2\0"+
    "\5\70\13\0\60\30\7\70\11\0\4\30\14\0\12\70"+
    "\11\0\25\30\5\0\23\30\260\0\100\30\200\0\113\30"+
    "\4\0\1\70\1\30\67\70\7\0\4\70\15\30\100\0"+
    "\2\30\1\0\1\30\34\0\370\30\10\0\363\30\15\0"+
    "\37\30\61\0\3\30\21\0\4\30\10\0\u018c\30\4\0"+
    "\153\30\5\0\15\30\3\0\11\30\7\0\12\30\3\0"+
    "\2\70\306\0\5\70\3\0\6\70\10\0\10\70\2\0"+
    "\7\70\36\0\4\70\224\0\3\70\273\0\125\30\1\0"+
    "\107\30\1\0\2\30\2\0\1\30\2\0\2\30\2\0"+
    "\4\30\1\0\14\30\1\0\1\30\1\0\7\30\1\0"+
    "\101\30\1\0\4\30\2\0\10\30\1\0\7\30\1\0"+
    "\34\30\1\0\4\30\1\0\5\30\1\0\1\30\3\0"+
    "\7\30\1\0\u0154\30\2\0\31\30\1\0\31\30\1\0"+
    "\37\30\1\0\31\30\1\0\37\30\1\0\31\30\1\0"+
    "\37\30\1\0\31\30\1\0\37\30\1\0\31\30\1\0"+
    "\10\30\2\0\151\70\4\0\62\70\10\0\1\70\16\0"+
    "\1\70\26\0\5\70\1\0\17\70\120\0\7\70\1\0"+
    "\21\70\2\0\7\70\1\0\2\70\1\0\5\70\325\0"+
    "\55\30\3\0\7\70\7\30\2\0\12\70\4\0\1\30"+
    "\u0171\0\54\30\16\70\6\0\305\30\13\0\7\70\51\0"+
    "\104\30\7\70\1\30\4\0\12\70\246\0\4\30\1\0"+
    "\33\30\1\0\2\30\1\0\1\30\2\0\1\30\1\0"+
    "\12\30\1\0\4\30\1\0\1\30\1\0\1\30\6\0"+
    "\1\30\4\0\1\30\1\0\1\30\1\0\1\30\1\0"+
    "\3\30\1\0\2\30\1\0\1\30\2\0\1\30\1\0"+
    "\1\30\1\0\1\30\1\0\1\30\1\0\1\30\1\0"+
    "\2\30\1\0\1\30\2\0\4\30\1\0\7\30\1\0"+
    "\4\30\1\0\4\30\1\0\1\30\1\0\12\30\1\0"+
    "\21\30\5\0\3\30\1\0\5\30\1\0\21\30\104\0"+
    "\327\30\51\0\65\30\13\0\336\30\2\0\u0182\30\16\0"+
    "\u0131\30\37\0\36\30\342\0\360\70\20\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\1\1\3\1\2\2\3\1\4"+
    "\2\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\3\1\22"+
    "\1\23\1\24\1\3\1\25\1\26\1\23\1\3\13\23"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\0"+
    "\1\36\1\0\1\37\1\0\1\40\1\0\1\41\1\0"+
    "\1\42\1\43\1\44\1\0\1\45\1\46\5\23\1\47"+
    "\1\23\1\50\11\23\1\51\1\34\1\36\1\0\3\23"+
    "\1\52\3\23\1\53\11\23\1\54\1\55\1\23\1\56"+
    "\3\23\1\57\2\23\1\60\3\23\1\61\1\23\1\62"+
    "\3\23\1\63\2\23\1\64\1\65\1\66\1\23\1\67"+
    "\1\70\2\23\1\71\1\72\1\23\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0127\0\u0213\0\u024e\0\u0127\0\u0127\0\u0127\0\u0127"+
    "\0\u0289\0\u0127\0\u02c4\0\u02ff\0\u033a\0\u0127\0\u0127\0\u0375"+
    "\0\u0127\0\u03b0\0\u0127\0\u03eb\0\u0127\0\u0426\0\u0127\0\u0127"+
    "\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe"+
    "\0\u0639\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0127\0\u0760\0\u0127"+
    "\0\u03b0\0\u0127\0\u079b\0\u0127\0\u01d8\0\u0127\0\u07d6\0\u0127"+
    "\0\u024e\0\u0127\0\u0213\0\u0127\0\u0811\0\u084c\0\u0127\0\u0127"+
    "\0\u049c\0\u0127\0\u03eb\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973"+
    "\0\u03eb\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10"+
    "\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0127\0\u0127\0\u01d8\0\u0c37"+
    "\0\u0c72\0\u0cad\0\u0ce8\0\u03eb\0\u0d23\0\u0d5e\0\u0d99\0\u03eb"+
    "\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71"+
    "\0\u0fac\0\u0127\0\u03eb\0\u0fe7\0\u03eb\0\u1022\0\u105d\0\u1098"+
    "\0\u03eb\0\u10d3\0\u110e\0\u03eb\0\u1149\0\u1184\0\u11bf\0\u03eb"+
    "\0\u11fa\0\u03eb\0\u1235\0\u1270\0\u12ab\0\u03eb\0\u12e6\0\u1321"+
    "\0\u03eb\0\u03eb\0\u03eb\0\u135c\0\u03eb\0\u03eb\0\u1397\0\u13d2"+
    "\0\u03eb\0\u03eb\0\u140d\0\u03eb";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\4\60\3\1\5\6\3\1\6\3\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\34\1\45\3\34\1\46"+
    "\1\34\1\47\1\50\2\34\1\51\1\34\1\52\1\53"+
    "\1\54\1\34\1\55\1\34\1\56\1\57\1\60\1\61"+
    "\1\6\1\62\1\6\64\3\1\0\7\3\3\4\60\3"+
    "\1\0\6\3\7\0\1\63\157\0\3\7\113\0\1\64"+
    "\46\0\5\65\1\66\24\65\1\67\40\65\66\0\1\70"+
    "\4\0\10\71\1\72\62\71\7\0\1\73\15\0\1\74"+
    "\60\0\1\75\3\0\1\76\73\0\1\24\73\0\1\62"+
    "\60\0\1\73\14\0\1\77\55\0\1\73\103\0\1\34"+
    "\7\0\1\34\4\0\1\34\1\0\25\34\4\0\1\34"+
    "\2\0\2\100\2\0\66\100\10\0\1\73\10\0\1\34"+
    "\7\0\1\34\4\0\1\34\1\0\25\34\4\0\1\34"+
    "\2\0\36\101\1\102\34\101\20\0\1\34\7\0\1\34"+
    "\4\0\1\34\1\0\17\34\1\103\5\34\4\0\1\34"+
    "\22\0\1\34\7\0\1\34\4\0\1\34\1\0\1\104"+
    "\10\34\1\105\13\34\4\0\1\34\22\0\1\34\7\0"+
    "\1\34\4\0\1\34\1\0\11\34\1\106\1\34\1\107"+
    "\10\34\1\110\4\0\1\34\22\0\1\34\7\0\1\34"+
    "\4\0\1\34\1\0\4\34\1\111\5\34\1\112\1\113"+
    "\11\34\4\0\1\34\22\0\1\34\7\0\1\34\4\0"+
    "\1\34\1\0\3\34\1\114\10\34\1\115\10\34\4\0"+
    "\1\34\22\0\1\34\7\0\1\34\4\0\1\34\1\0"+
    "\1\116\24\34\4\0\1\34\22\0\1\34\7\0\1\34"+
    "\4\0\1\34\1\0\16\34\1\117\6\34\4\0\1\34"+
    "\22\0\1\34\7\0\1\34\4\0\1\34\1\0\11\34"+
    "\1\120\13\34\4\0\1\34\22\0\1\34\7\0\1\34"+
    "\4\0\1\34\1\0\3\34\1\121\21\34\4\0\1\34"+
    "\22\0\1\34\7\0\1\34\4\0\1\34\1\0\13\34"+
    "\1\122\3\34\1\123\5\34\4\0\1\34\22\0\1\34"+
    "\7\0\1\34\4\0\1\34\1\0\6\34\1\124\16\34"+
    "\4\0\1\34\27\0\1\125\62\0\1\126\6\0\1\126"+
    "\1\0\1\126\6\0\1\126\31\0\1\126\3\0\5\65"+
    "\1\127\24\65\1\67\40\65\13\75\1\130\57\75\2\76"+
    "\1\0\70\76\20\0\1\34\7\0\1\34\4\0\1\34"+
    "\1\0\17\34\1\131\5\34\4\0\1\34\22\0\1\34"+
    "\7\0\1\34\4\0\1\34\1\0\1\132\24\34\4\0"+
    "\1\34\22\0\1\34\7\0\1\34\4\0\1\34\1\0"+
    "\17\34\1\133\5\34\4\0\1\34\22\0\1\34\7\0"+
    "\1\34\4\0\1\34\1\0\2\34\1\134\22\34\4\0"+
    "\1\34\22\0\1\34\7\0\1\34\4\0\1\34\1\0"+
    "\20\34\1\135\4\34\4\0\1\34\22\0\1\34\7\0"+
    "\1\34\4\0\1\34\1\0\15\34\1\136\7\34\4\0"+
    "\1\34\22\0\1\34\7\0\1\34\4\0\1\34\1\0"+
    "\22\34\1\137\2\34\4\0\1\34\22\0\1\34\7\0"+
    "\1\34\4\0\1\34\1\0\20\34\1\140\4\34\4\0"+
    "\1\34\22\0\1\34\7\0\1\34\4\0\1\34\1\0"+
    "\14\34\1\141\10\34\4\0\1\34\22\0\1\34\7\0"+
    "\1\34\4\0\1\34\1\0\20\34\1\142\4\34\4\0"+
    "\1\34\22\0\1\34\7\0\1\34\4\0\1\34\1\0"+
    "\14\34\1\143\10\34\4\0\1\34\22\0\1\34\7\0"+
    "\1\34\4\0\1\34\1\0\14\34\1\144\10\34\4\0"+
    "\1\34\22\0\1\34\7\0\1\34\4\0\1\34\1\0"+
    "\12\34\1\145\12\34\4\0\1\34\22\0\1\34\7\0"+
    "\1\34\4\0\1\34\1\0\20\34\1\146\4\34\4\0"+
    "\1\34\22\0\1\34\7\0\1\34\4\0\1\34\1\0"+
    "\7\34\1\147\15\34\4\0\1\34\22\0\1\34\7\0"+
    "\1\34\4\0\1\34\1\0\3\34\1\150\3\34\1\151"+
    "\15\34\4\0\1\34\2\0\13\75\1\130\3\75\1\152"+
    "\53\75\20\0\1\34\7\0\1\34\4\0\1\34\1\0"+
    "\3\34\1\153\21\34\4\0\1\34\22\0\1\34\7\0"+
    "\1\34\4\0\1\34\1\0\17\34\1\154\5\34\4\0"+
    "\1\34\22\0\1\34\7\0\1\34\4\0\1\34\1\0"+
    "\3\34\1\155\21\34\4\0\1\34\22\0\1\34\7\0"+
    "\1\34\4\0\1\34\1\0\3\34\1\156\21\34\4\0"+
    "\1\34\22\0\1\34\7\0\1\34\4\0\1\34\1\0"+
    "\14\34\1\157\10\34\4\0\1\34\22\0\1\34\7\0"+
    "\1\34\4\0\1\34\1\0\14\34\1\160\10\34\4\0"+
    "\1\34\22\0\1\34\7\0\1\34\4\0\1\34\1\0"+
    "\15\34\1\161\7\34\4\0\1\34\22\0\1\34\7\0"+
    "\1\34\4\0\1\34\1\0\1\34\1\162\23\34\4\0"+
    "\1\34\22\0\1\34\7\0\1\34\4\0\1\34\1\0"+
    "\5\34\1\163\17\34\4\0\1\34\22\0\1\34\7\0"+
    "\1\34\4\0\1\34\1\0\20\34\1\164\4\34\4\0"+
    "\1\34\22\0\1\34\7\0\1\34\4\0\1\34\1\0"+
    "\15\34\1\165\7\34\4\0\1\34\22\0\1\34\7\0"+
    "\1\34\4\0\1\34\1\0\7\34\1\166\15\34\4\0"+
    "\1\34\22\0\1\34\7\0\1\34\4\0\1\34\1\0"+
    "\13\34\1\167\11\34\4\0\1\34\22\0\1\34\7\0"+
    "\1\34\4\0\1\34\1\0\13\34\1\170\11\34\4\0"+
    "\1\34\22\0\1\34\7\0\1\34\4\0\1\34\1\0"+
    "\11\34\1\171\13\34\4\0\1\34\22\0\1\34\7\0"+
    "\1\34\4\0\1\34\1\0\17\34\1\172\5\34\4\0"+
    "\1\34\22\0\1\34\7\0\1\34\4\0\1\34\1\0"+
    "\13\34\1\173\11\34\4\0\1\34\22\0\1\34\7\0"+
    "\1\34\4\0\1\34\1\0\16\34\1\174\6\34\4\0"+
    "\1\34\22\0\1\34\7\0\1\34\4\0\1\34\1\0"+
    "\10\34\1\175\14\34\4\0\1\34\22\0\1\34\7\0"+
    "\1\34\4\0\1\34\1\0\6\34\1\176\16\34\4\0"+
    "\1\34\22\0\1\34\7\0\1\34\4\0\1\34\1\0"+
    "\16\34\1\177\6\34\4\0\1\34\22\0\1\34\7\0"+
    "\1\34\4\0\1\34\1\0\11\34\1\200\13\34\4\0"+
    "\1\34\22\0\1\34\7\0\1\34\4\0\1\34\1\0"+
    "\11\34\1\201\13\34\4\0\1\34\22\0\1\34\7\0"+
    "\1\34\4\0\1\34\1\0\5\34\1\202\17\34\4\0"+
    "\1\34\22\0\1\34\7\0\1\34\4\0\1\34\1\0"+
    "\3\34\1\203\21\34\4\0\1\34\22\0\1\34\7\0"+
    "\1\34\4\0\1\34\1\0\2\34\1\204\22\34\4\0"+
    "\1\34\22\0\1\34\7\0\1\34\4\0\1\34\1\0"+
    "\20\34\1\205\4\34\4\0\1\34\22\0\1\34\7\0"+
    "\1\34\4\0\1\34\1\0\3\34\1\206\21\34\4\0"+
    "\1\34\22\0\1\34\7\0\1\34\4\0\1\34\1\0"+
    "\1\207\24\34\4\0\1\34\22\0\1\34\7\0\1\34"+
    "\4\0\1\34\1\0\1\210\24\34\4\0\1\34\22\0"+
    "\1\34\7\0\1\34\4\0\1\34\1\0\17\34\1\211"+
    "\5\34\4\0\1\34\22\0\1\34\7\0\1\34\4\0"+
    "\1\34\1\0\12\34\1\212\12\34\4\0\1\34\22\0"+
    "\1\34\7\0\1\34\4\0\1\34\1\0\20\34\1\213"+
    "\4\34\4\0\1\34\22\0\1\34\7\0\1\34\4\0"+
    "\1\34\1\0\3\34\1\214\21\34\4\0\1\34\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[5192];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\3\1\1\11\3\1\1\11\2\1\4\11\1\1"+
    "\1\11\3\1\2\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\2\11\15\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\1\2\11\1\0\1\11"+
    "\22\1\2\11\1\1\1\0\21\1\1\11\42\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _DejavuLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public com.intellij.psi.tree.IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return NORMAL_TEXT;
            }
          // fall through
          case 60: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 61: break;
          case 3:
            { return BAD_CHARACTER;
            }
          // fall through
          case 62: break;
          case 4:
            { return DOLLAR;
            }
          // fall through
          case 63: break;
          case 5:
            { return PARENTHESIS_L;
            }
          // fall through
          case 64: break;
          case 6:
            { return PARENTHESIS_R;
            }
          // fall through
          case 65: break;
          case 7:
            { return OP_MANY;
            }
          // fall through
          case 66: break;
          case 8:
            { return COMMA;
            }
          // fall through
          case 67: break;
          case 9:
            { return HYPHEN;
            }
          // fall through
          case 68: break;
          case 10:
            { return DOT;
            }
          // fall through
          case 69: break;
          case 11:
            { return SLASH;
            }
          // fall through
          case 70: break;
          case 12:
            { return INTEGER;
            }
          // fall through
          case 71: break;
          case 13:
            { return COLON;
            }
          // fall through
          case 72: break;
          case 14:
            { return SEMICOLON;
            }
          // fall through
          case 73: break;
          case 15:
            { return ANGLE_L;
            }
          // fall through
          case 74: break;
          case 16:
            { return BIND;
            }
          // fall through
          case 75: break;
          case 17:
            { return ANGLE_R;
            }
          // fall through
          case 76: break;
          case 18:
            { return AT;
            }
          // fall through
          case 77: break;
          case 19:
            { return SYMBOL;
            }
          // fall through
          case 78: break;
          case 20:
            { return BRACKET_L;
            }
          // fall through
          case 79: break;
          case 21:
            { return BRACKET_R;
            }
          // fall through
          case 80: break;
          case 22:
            { return OP_REMARK;
            }
          // fall through
          case 81: break;
          case 23:
            { return BRACE_L;
            }
          // fall through
          case 82: break;
          case 24:
            { return OP_OR;
            }
          // fall through
          case 83: break;
          case 25:
            { return BRACE_R;
            }
          // fall through
          case 84: break;
          case 26:
            { return OP_CONCAT;
            }
          // fall through
          case 85: break;
          case 27:
            { return PROPORTION;
            }
          // fall through
          case 86: break;
          case 28:
            { yybegin(ProgramContext);
          return TEMPLATE_L;
            }
          // fall through
          case 87: break;
          case 29:
            { return OP_NE;
            }
          // fall through
          case 88: break;
          case 30:
            { return TEXT_DOUBLE;
            }
          // fall through
          case 89: break;
          case 31:
            { yybegin(YYINITIAL);
		  return TEMPLATE_R;
            }
          // fall through
          case 90: break;
          case 32:
            { return TEXT_SINGLE;
            }
          // fall through
          case 91: break;
          case 33:
            { return TO;
            }
          // fall through
          case 92: break;
          case 34:
            { return COMMENT_LINE;
            }
          // fall through
          case 93: break;
          case 35:
            { return OP_EQ;
            }
          // fall through
          case 94: break;
          case 36:
            { return ESCAPED;
            }
          // fall through
          case 95: break;
          case 37:
            { return SYMBOW_RAW;
            }
          // fall through
          case 96: break;
          case 38:
            { return KW_AS;
            }
          // fall through
          case 97: break;
          case 39:
            { return KW_IF;
            }
          // fall through
          case 98: break;
          case 40:
            { return KW_IN;
            }
          // fall through
          case 99: break;
          case 41:
            { return OP_THEN;
            }
          // fall through
          case 100: break;
          case 42:
            { return KW_END;
            }
          // fall through
          case 101: break;
          case 43:
            { return KW_LET;
            }
          // fall through
          case 102: break;
          case 44:
            { return COMMENT_BLOCK;
            }
          // fall through
          case 103: break;
          case 45:
            { return KW_CASE;
            }
          // fall through
          case 104: break;
          case 46:
            { return KW_ELSE;
            }
          // fall through
          case 105: break;
          case 47:
            { return KW_LOOP;
            }
          // fall through
          case 106: break;
          case 48:
            { return KW_SLOT;
            }
          // fall through
          case 107: break;
          case 49:
            { return KW_WHEN;
            }
          // fall through
          case 108: break;
          case 50:
            { return KW_CLASS;
            }
          // fall through
          case 109: break;
          case 51:
            { return KW_MATCH;
            }
          // fall through
          case 110: break;
          case 52:
            { return KW_UNTIL;
            }
          // fall through
          case 111: break;
          case 53:
            { return KW_USING;
            }
          // fall through
          case 112: break;
          case 54:
            { return KW_WHILE;
            }
          // fall through
          case 113: break;
          case 55:
            { return KW_IMPORT;
            }
          // fall through
          case 114: break;
          case 56:
            { return KW_INVOKE;
            }
          // fall through
          case 115: break;
          case 57:
            { return KW_EXTENDS;
            }
          // fall through
          case 116: break;
          case 58:
            { return KW_PROGRAM;
            }
          // fall through
          case 117: break;
          case 59:
            { return KW_TEMPLATE;
            }
          // fall through
          case 118: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
